{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"Java 1. JVM / JRE / JDK JDK, JRE, JVM 관계 1-1. JVM (Java Virtual Machine) 우리가 Java로 작성한 코드는 컴파일러를 통해 확장자를 가진 바이너리(=바이트) 코드로 바뀐다. 컴파일된 바이너리 코드는 운영체제(Mac,Window,IOS,Android)마다 다르게 인식한다. Java는 운영체제별 JVM을…","fields":{"slug":"/22_11_08/"},"frontmatter":{"date":"November 08, 2022","title":"✏️ 2022-11-08 Today I Learn","tags":["Java","Python","CS","TIL","내일배움캠프","스파르타코딩캠프"]},"rawMarkdownBody":"\n## [Java] 1. JVM / JRE / JDK\n\n![JDK, JRE, JVM 관계](/image/221108_01.png)\n\n### 1-1. JVM (Java Virtual Machine)\n\n- 우리가 Java로 작성한 코드는 컴파일러를 통해 `.class`확장자를 가진 바이너리(=바이트) 코드로 바뀐다.\n- 컴파일된 바이너리 코드는 운영체제(Mac,Window,IOS,Android)마다 다르게 인식한다.\n- Java는 운영체제별 JVM을 제공하여, 컴파일된 코드가 운영체제에 상관없이 똑같은 동작을 낼 수 있도록 한다.\n- 즉, JVM은 컴파일 코드를 읽고/검증하고/실행하여 운영체제가 변해도 똑같은 동작을 할 수 있게 돕는다.\n\n### 1-2. JRE (Java Runtime Environment)\n\n- 말그대로, 자바 코드의 실행 시 필요한 도구들을 갖춘 **환경**이다.\n- JVM + 자바 프로그램 실행에 필요한 라이브러리 파일(system.out, 등...)으로 구성되어있다.\n\n### 1-3. JDK (Java Development Kit)\n\n- JRE + 개발을 위한 도구(컴파일러, 디버거, ...)\n\n## [Java] 2. 예외\n\n![Throwable](/image/221108_02.png)\n\n자바는 예외처리도 예외에 관한 클래스를 상속받아 구현한다.\n`Throwable`이라는 클래스가 있고, 그 하위자식들로 예외를 표현한다.\n\n### 2-1. 예외 기본\n\n- Error : 컴퓨터나 JVM이 동작할 수 없는 크리티컬한 상황.\n- Exception : 그 외의 대부분 문제상황.\n\n  - RuntimeException : 프로그램 실행도중 발생 할 수 있는 상황에 사용됨.\n  - IOException : 파일을 읽고 쓰는 상황에서 발생 할 수 있는 상황에 사용됨.\n\n- catch 는 이어서 사용하여, 다양한 예외를 잡을 수 있다. 단, 더 작은 범위의 Exception 부터 사용하여야, 더 많은 예외를 잡는 것이 가능해진다.\n\n```java\ntry{\n    검증 코드\n}catch(작은범위의 에러){\n    예외 시 처리1\n}catch(넓은범위의 에러){\n    예외 시 처리2\n}\n```\n\n### 2-2. try-with-resource\n\n입출력을 사용 할 때, 파일을 열고 닫는 행위를 해야한다.\n이 때 의무적으로, close() 메소드를 호출하여 처리해야하는데, `try-with-resource` 방식을 사용하게 되면 try에 전달한 자원을 try실행이후 자동으로 close 해주면서, 효율적인 코드를 작성하는데 도움을 준다.  \n`try-with-resource` 방식은 closeable interface 를 implements 한다.\n\n```java\ntry(...1. 자원할당){\n    ...2. 코드실행\n}\n...3. 자원 자동해제\ncatch(e){\n    ...\n}\ncatch(e){\n    ...\n}\n```\n\n# 2-3. 메소드에 예외처리를 전가하기\n\n`throws`키워드를 사용하여, 예외를 메소드 실행시점으로 전가 시킨다. 단, 해당 키워드를 통해서 정의한 메소드는 반드시, try-catch문을 이용하여 정의한 exception에 대한 예외처리를 반드시 해야한다.\n\n```java\n\npublic static String getString(String a) throws Exception_1, Exception_2 {\n    ....\n}\n\ntry{\n    getString(\"sdsada\")\n}catch(Exception_1 e){\n    ...\n}catch(Exception_2 e){\n    ...\n}\n\n```\n\n## [Java] 3. Collection\n\n자료구조를 표현하고 사용하기 위한 클래스의 집합.\n\n### 3-1. ArrayList vs HashSet\n\n- ArrayList는 순서가 보장됨, HashSet은 순서가 보장되지 않음.\n\n### 3-2. ArrayDeque(Double-Ended Queue)\n\n- Stack과 Queue의 기능을 모두 포함하면서 성능이 더 좋다.\n- 하지만, Thread-Safe하지 않기에, 멀티쓰레드 환경에서는 문제가 있다.\n- 그래서 pop(), push(), peek() 등에 synchronized를 이용해 ArrayDeque을 구현하면 된다.\n- ArrayDeque의 push는 addFirst와 동일하게 동작한다.\n\n## [Java] 4. Generics\n\nCollection 클래스를 Generics를 통해 컴파일타임에 타입체크해줌으로서, 프로그램의 안정성을 증대시켜준다.\n\n### 4-1. 사용예들\n\n```java\n<T> // Type\n<E> //Element\n<K> //Key\n<V> //Value\n<N> //Number\n<R> //Result\n```\n\n## [Java] 5. 람다와 스트림\n\n### 5-1. 람다\n\n- 식별자 없이 실행 가능한 함수.\n- 코드가 간결해지지만, 익명함수기에 재사용성이 줄어든다는 단점이 있다.\n- forEach, map, filter, ...\n\n### 5-2. 스트림\n\n- 데이터를 여러개 표현 할 수 있는 곳에는 흐름이 생기고, 그 흐름을 이용해서 조작을 하는 것이다.\n- 데이터가 삭제되고, 수정되고, 들어오고 하면서 데이터가 유동적으로 변하게 된다. 이를 흐름이라 칭하는 것 같다.\n- java8에서 적용되었다.\n- 흐름내부에서만 변동되지, 흐름의 대상을 직접적으로 수정하지는 않는다.\n- 한번닫힌 흐름은 재사용이 불가하다.\n- `collect()` 를 이용하여 스트림과정에서 return된 결과를 모아준다. 매개변수를 통해 collection타입도 변경가능하다.\n\n## [CS] 6. API(Application Programing Interface)\n\n데이터를 주고받는 형식에 대한 약속(규약-Interface)\n\n## [Python] 7. set\n\nset은 집합을 만들기 위한 개념으로서 합/교/차집합을 구하는 것이 가능하다.\n\n```python\nset() & set() # 교집합\nset() | set() # 합집합\nset() - set() # 차집합\n```\n\nset은 중복을 없애준다. 단, 순서를 보장하지 않는다.\n\n## [Python] 8. 다양한 매개변수를 받는방법\n\n```python\ndef a(*args):\n    print(args) # (a,b,c,) 튜플형식으로 인자가 들어옴\n\ndef b(**kwargs):\n    print(kwargs) # {\"a\":1,\"b\":2, ...} 와 같은 딕셔너리 형태로 인자가 들어옴\n```\n\n## [회고] 221108 : 왜 겁을 내는가\n\n질문방에는 다양한 질문이 올라온다. 다양한 사람들이 다양한 답변을 한다. 컴퓨터전공 수강생들/개발을 좀 해본 수강생들/튜터님들/매니저님들..\n나는 다양한 답변이 올라오는 곳에서의 토론은 의식적으로 피한다. 왜그런지 곰곰하게 생각해보니 아래의 결론이 도출되었다.\n\n1. 내 의견이 틀리는 것이 무서워서\n2. 내 의견이 지적당하는게 두려워서\n3. 토론에 휘말리기 싫어서\n4. 내가 잘난척하는 느낌이 나는것이 싫어서\n\n너무나도 명확하게 내가 고쳐야 할 점들이 도출되었다. 내가 봐 온 위대한 개발자들은 군중앞에서 말하고, 의견을 나누고, 토론하는 것을 즐겼다.\n다만, 그게 틀릴지라도 틀린것에 반박할 수 있는 지식을 가지고 있었지만 말이다.\n어쨋던, 난 너무 내 틀에 갖혀있다는 생각을 했다. 토론이 이뤄질 때, 비전공자 팀원들이 모여있는 방에 숨어 저건 맞다 저건아니다 하는 시시비비를 가리는 모습을 보면서 앞으로 나서지 못하고 뒤에서 의견을 내는 내가 한심하게 느껴졌다.  \n이건 아니다.  \n이건 성장할 수 없는 태도다.  \n왜 겁을 내는가.  \n변해야한다.  \n내 틀에서 벗어나야한다.\n\n## [다짐] 221109\n\n- 상대방의 의견을 경청하기 / 무시하지 않기\n- 적극적으로 질문하기\n- 적극적으로 토론하기\n- 적극적으로 잘난척하기(내가 토론을 할 수있는 것에 대해)\n- 지속적으로 의문을 갖고 어떤 문제에 대해 파고들기\n"},{"excerpt":"Java 자바의 특징 객제 지향적 프로그래밍을 지향한다. Write One Run Anywhere JRE(Java Runtime Environment) 를 이용해, 플랫폼(맥,윈도우,안드로이드,IOS)에 종속되지 않고 실행된다. Java 변수 어떤 값을 할당하는 공간을 메모리라고 한다. 그 공간에 이름을 붙혀주는 것을 변수라고 한다. Java 초기값 Ja…","fields":{"slug":"/22_11_07/"},"frontmatter":{"date":"November 07, 2022","title":"✏️ 2022-11-07 Today I Learn","tags":["Java","TIL","내일배움캠프","스파르타코딩캠프"]},"rawMarkdownBody":"\n## [Java] 자바의 특징\n\n- 객제 지향적 프로그래밍을 지향한다.\n- Write One Run Anywhere\n  - JRE(Java Runtime Environment) 를 이용해, 플랫폼(맥,윈도우,안드로이드,IOS)에 종속되지 않고 실행된다.\n\n## [Java] 변수\n\n어떤 값을 할당하는 공간을 **메모리**라고 한다. 그 공간에 이름을 붙혀주는 것을 **변수**라고 한다.\n\n## [Java] 초기값\n\nJava는 초기값을 할당해주지 않으면, 해당 자료형의 초기값을 기본값으로 자동할당하여 초기화한다.\n\n```java\nimport java.util.Map;\n\npublic class Test {\n\n\tstatic byte byteT;\n\tstatic short shortT;\n\tstatic int intT;\n\tstatic long longT;\n\tstatic float floatT;\n\tstatic double doubleT;\n\tstatic char charT;\n\tstatic boolean booleanT;\n\tstatic String stringT;\n\tstatic Map mapT;\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(byteT); //0\n\t\tSystem.out.println(shortT); //0\n\t\tSystem.out.println(intT); //0\n\t\tSystem.out.println(longT); //0\n\t\tSystem.out.println(floatT); //0.0\n\t\tSystem.out.println(doubleT); //0.0\n\t\tSystem.out.println(charT); //\n\t\tSystem.out.println(booleanT); //false\n\t\tSystem.out.println(stringT); //null\n\t\tSystem.out.println(mapT); //null\n\t}\n\n}\n```\n\n## [Java] 객체지향\n\n### 객체지향기본 - 클래스\n\n틀\n\n### 객체지향기본 - 인스턴스\n\n클래스 틀을 이용해 만들어진 실제 사용 객체.\n\n### 객체지향기본 - 인스턴스의 특징\n\n붕어빵이 구워진 뒤 먹은붕어빵, 식은붕어빵, 갓 구운 붕어빵 등등 각각의 상태가 달라지는 것 처럼. 인스턴스는 생성 된 뒤로 그 상태가 각각 다르게 변함.\n\n### 객체지향기본 - 메소드\n\n함수\n\n### 객체지향기본 - 생성자\n\n인스턴스 초기화 메소드. new 키워드를 이용해 사용하며, return 값이 없고 자신이 속해있는 class와 같은 값을 가진다.\n\n### 객체지향기본 - 기본 생성자 초기화\n\n생성자를 정의하지 않고, 인스턴스를 초기화해도 잘 동작이 된다. 그 이유는 자바컴파일러가 자동으로 매개변수가 없는 기본생성자를 만들어주기 때문이다.\n\n### 상속 - 오버로딩(쌔삥)\n\n부모에 있는 같은 이름의 메소드를 만들되, 매개변수의 갯수, 타입이 다른 메소드를 만드는 것.\n\n### 상속 - 오버라이딩\n\n부모에 있는 메소드 중 메소드이름, 매개변수의 갯수, 타입, return타입 모두 일치하지만 기능자체를 새로 정의한 함수를 만드는 것.\n\n### 접근제어자\n\n키워드별 권한 접근제한 정도\n\n```\nprivate > default > protected > public\n```\n\n- private : 같은 클래스 내 에서만 접근이 가능함.\n- default : 같은 패키지 내 에서만 접근이 가능함.\n- protected : 같은 패키지, 다른패키지의 자손클래스에서 접근이 가능함.\n- public : 접근 제한 없음\n\n### 접근제어자 - 캡슐화\n\n객체지향이란 **객체 간 상호작용을 표현** 한 것이다. 상호작용을 할 때는 우리가 현실에서도 모든 정보를 남에게 공개하지 않는 것 처럼, 정보에 대한 제한을 두어야 한다. 이런 제한을 두어 정보를 숨기는 것을 **캡슐화**라고 하며, 접근제어자는 자바의 캡슐화 구현을 위해 가장 필요한 개념이다.\n\n### 추상클래스\n\n추상메소드를 선언 할 수 있는 클래스. 상속없이 그 자체로 생성자를 이용해 인스턴스를 생성하는 것이 불가하다.\n`extends` 키워드를 사용하여 상속하며, 다중상속이 불가하다.\n\n```java\nabstract class A{\n    ....\n}\n```\n\n### 추상메소드\n\n설계도(매개변수 정의)만 있고, 구현체(몸통)은 없는 메소드. 구현은 자식클래스에서 구현해야한다.  \n미완성으로 남겨두는 이유는 **상속받는 클래스 마다 반드시 동작이 달라지는 경우**에 상속받는 클래스 작성자가 반드시 작성하도록하기 위함입니다.\n\n```java\nabstract class A{\n    ....\n    abstract 리턴타입 메소드이름(int C);\n}\n```\n\n### 인터페이스\n\n객체의 특정행동의 특징을 정의한다. 인터페이스를 실행하는 클래스는 반드시 인터페이스에 정의된 메소드를 구현해주어야한다.\n\n`implements` 키워드를 이용해서 상속할 수 있으며, 다중상속이 가능하다.\n\n### 인터페이스와 추상클래스의 차이 정리\n\n| 인터페이스                                                    | 추상클래스                            |\n| :------------------------------------------------------------ | :------------------------------------ |\n| 구현하려는 객체의 동작의 명세                                 | 클래스를 상속받아 이용 및 확장을 위함 |\n| 다중 상속 가능                                                | 다중 상속 불가능 , 단일 상속          |\n| implements를 이용하여 구현                                    | extends를 이용하여 구현               |\n| 메소드 시그니처(이름, 파라미터, 리턴 타입)에 대한 선언만 가능 | 추상메소드에 대한 구현 가능           |\n\n## [회고] 221107\n\n처음 타입을 배울 땐 몰랐는데, 객체지향개념에 들어가니 내가 왜 옛날에 국비지원학원에서 자바수업에 그렇게 들어가기 싫어했는지 깨닫게 되었다.\n\n하지만, 그 때보다는 다른 이론을 받아들이는데에 있어서 조금은 여유로워 진 것이 느껴졌다. 다른 언어를 프레임워크레벨까지 보고 와서 그런건가..? 웹플로우에 익숙해져서 인가.. 하지만 아직 자바의 객체지향을 잘 사용하기 위해 만들어진 인터페이스나 추상메서드의 개념은 언제 어디에 사용해야하는지 익숙하지 않다. 불편함을 익숙함으로 만드는 것에 익숙해져야 개발자다! 얼른 많이 시행착오 겪어서, 손에 익었으면 좋겠다.\n"},{"excerpt":"FACT-01. 처음보는 4분과 팀 프로젝트를 진행했다. FEELINGS 5일이라는 짧은시간이지만 심적거리감이 매우 가까워졌다. FINDINGS 짧은시간동안 심적거리감을 가깝게 만들기 위해선, 함께 시련을 극복하는 것이 가장 효과적이라는 것을 느꼈다. 서로 인강만 보면서 공부하는 시스템이었다면, 이렇게 친해질 수 있을까? 회사에서 친해지는 동료들은 주로 …","fields":{"slug":"/22_11_1st/"},"frontmatter":{"date":"November 06, 2022","title":"✏️ 2022-11-1st Weekly I Learn","tags":["WIL","스파르타코딩캠프","내일배움캠프"]},"rawMarkdownBody":"\n## FACT-01. 처음보는 4분과 팀 프로젝트를 진행했다.\n\n- **FEELINGS**\n  - 5일이라는 짧은시간이지만 심적거리감이 매우 가까워졌다.\n- **FINDINGS**\n  - 짧은시간동안 심적거리감을 가깝게 만들기 위해선, 함께 시련을 극복하는 것이 가장 효과적이라는 것을 느꼈다. 서로 인강만 보면서 공부하는 시스템이었다면, 이렇게 친해질 수 있을까? 회사에서 친해지는 동료들은 주로 같은팀, 즉 같은 시련을 동고동락했던 사람들 이었다는 것을 다시금 깨달았다.\n- **FUTURE**\n  - 회사에 빠르게 적응하기 위해서, 혹은 다른사람과 빠른시간이내에 가까워지고 싶다면, 시련을 제안하고 같이 극복해보려고 하자.\n  - 시련은 다양한 부류가 있다. 스터디를 통해 특정목표를 달성하거나, 프로젝트를 어떤 기한내에 완성시킨다던가..\n  - 생각해보니, 그래서 크로스핏 박스에서 사람들이랑 금방 친해졌던 것 같다.\n\n## FACT-02. 팀장이 아닌데, PM의 역할을 자청해서 프로젝트를 리드했다.\n\n- **FEELINGS**\n  - 처음엔 팀장님의 역할을 내가 가져가는게 아닌가 싶어 죄송했다. 따라서, 팀장님께 계속 내가 어떤 일을 하려고 하는지 공유드렸다. 난, 프로젝트를 리드 할 자신이 있었고, 일정 내에 완수시킬 자신이 있었기에 PM을 자청했고, 팀장님과 팀원의 신뢰를 받았다.\n- **FINDINGS**\n  - 팀장님께선 내가 주도적으로 이끌어 가는 것엔 처음엔 당황하셨으나, 신뢰가 쌓인 다음부터는 전적으로 나를 믿고 지지해주셨고, 신뢰가 쌓이면서 프로젝트가 순항하는 모습을 발견하게 되었다.\n- **FUTURE**\n  - 어떤 역할을 자진해서 맡을땐, 끝까지 성공적으로 이끌어갈 플랜이나 자신감이 있을 때 지원하자. 즉, 다른사람들에게 신뢰를 얻을 자신이 있을 때 하자.\n  - 단, 포지션에 지원 할 땐 동료가 당황 할 수 있으니, 서로 합의 후에 진행하자.\n\n## FACT-03. git과 github 특강이 있었고, 팀원들과 git을 이용한 협업을 했다.\n\n- **FEELINGS**\n  - 과거에 가장 어려움을 겪었던 점이기에 팀원들을 잘 이해시키고, 이끌어 갈 수 있을지 확신이 없었다.\n- **FINDINGS**\n  - 인터넷 강의로만 보는 것 보다, 실패하더라도 실제로 적용해보는 것이 학습에 효과적이라는 점을 볼 수 있었다.\n- **FUTURE**\n  - 새로운 시도를 할 땐, 두려워하지 말고 일단 해보자!\n\n## FACT-04. 개인페이지를 모아 flask 프로젝트 틀을 잡아 팀원들에게 전달했다.\n\n- **FEELINGS**\n  - 과거 프로젝트를 그대로 복붙하는거라서, 내가 한건 api를 복붙해서 사용하는 것이었다. 하지만, 서버-클라이언트의 구조를 이해하기엔 이것을 잇는 것 만큼 좋은 경험이 없었다고 생각하는데, 팀원들에게 그런 경험을 할 수 있는 기회를 뺏은 것 같아서 죄송했다. 각자에게 미션을 드리고 잇는 것을 도와드리는 방향으로 갔어야 했는데, 내가 이 업무를 맡으면서 백엔드 작업의 80%는 한 것 같다.\n- **FINDINGS**\n  - 내가 할 수 있고, 남이 못하는 것은 일단 남이 할 수 있게 만드는게 서로에게 윈윈이 되겠다는 것을 느꼈다.\n- **FUTURE**\n  - 내가 할 수 있고, 남이 못하는 일은 남이 하도록 만들어야 서로의 속도를 맞출 수 있다.\n  - 반대로 내가 못하고, 남이 할 수 있는 일에는 내가 자진해서 하고 조언을 요청하는 식으로 일을 진행하자.\n\n## FACT-05. git 을 이용한 협업플로우에 문제가 있음을 발견했다.\n\n- **FEELINGS**\n  - 회고 할 때 발견했는데, 이미 중간부터 이건 아니다 라는 것을 느끼고 있었는데 '문제 없겠지 뭐' 라는 안일한 생각으로 계속 진행했다. 결론적으로, 안그래도 머리가 아픈 팀원분들에게 더 혼란을 드렸다.\n- **FINDINGS**\n  - 내가 제대로 알지 못하는 것은, 현실에서 이행하지 않는게 좋겠다는 생각을 했다.\n- **FUTURE**\n  - 어떤 것을 제안하거나, 적용 할 때는 확실히 이해하고 남에게 설명 할 수 있을 정도의 레벨까지 만들고 진행하자. 빵꾸(?)가 있는 것은 그 빵꾸(?)를 메꾸고, 제안하던지 하자!\n\n## FACT-06. 일정에 맞추어 업무를 완료했다.\n\n- **FEELINGS**\n  - 제일 힘들었던 것이 정도를 지키는 것이었다. 솔직히, 구현하고 싶은 기능도 많았고, 내가 마음먹고 진행하면 단독으로 하면 되는 것도 많았는데, 팀플레이를 택했다.\n  - 팀플레이를 택하는데 가장 영향을 많이 줬던 사건은, 첫날 API를 짜는데 매니저님의 제안을 통해 깨닫게 된 팀원들의 흔들리는 눈동자를 보고 반성하게 된 사건이었다.\n  - 욕심부리지 않고 할 수 있는 범위의 업무를 할당하고 조정한 것이 일정에 맞추어 업무를 완료하는데 가장 도움이 되었다.\n- **FINDINGS**\n  - 내가 잘하는 것도 중요하지만, 남들과 어떻게 속도를 맞추냐가 협업의 관건이라는 것을 느꼈다.\n  - 욕심내면 할 수 있겠다 싶었던 기능도 최종적으로 보았을 때, 할 시간이 없었다.\n- **FUTURE**\n  - 모두가 감당가능한 일정이 모두에게 행복을 준다.\n  - 욕심을 배제한 자신이 일정을 책임질 수 있는 업무를 기본구현기능으로 잡고, 먼저 끝낸 사람에게는 추가적인 업무를 할 수 있도록 하는게 나은 것 같다.\n\n## FACT-07. 발표를 마치고, 튜터님으로 부터 긍정적인 피드백을 받았다.\n\n- **FEELINGS**\n  - 다른 팀이 랜딩페이지만 드래그하면서 화면과 기능에 대한 설명을 하니, 튜터님께서는 그에 맞게 UI&UX에 대한 피드백을 해주셨다. 우리팀은 특별한 기능이 없었기 때문에, 전반적인 피드백을 받길 원했다. 따라서, 우리가 어떻게 일정을 진행했고, 어떤 히스토리로 랜딩페이지를 만들게 되었는지 설명드리고, 어떤 파트를 어떤 분이 맡으셨는지 시연을 하면서 설명드리니, 사실 남들에 비해 많은 기능이 없는 페이지임에도 불구하고 흠 잡을 것 없었다는 피드백을 받았다.\n  - 발표의 큰 맥락을 잡고, 머릿속으로 내가 어떤파트를 설명하고 있는지 신경써가며 완성된 문장을 뱉으려고 노력했다.\n- **FINDINGS**\n  - 피드백을 받고 싶은 범위를 확실히 하는것과 그렇지 않는것은 천지차이라는 것을 깨달았다. 목적을 확실히 하고, 그에 관해 어필하니 상대방도 '아~ 이 팀은 이런걸 신경썼구나. 많은 기능은 없지만, 중요하다고 생각하는것을 잘 타겟팅했네' 라고 생각해주시는 것 같았다. 그래서, 좋은 피드백을 받았다고 느꼈다.\n  - 또한, 예전부터 나는 남에게 말을 못이해시키는 경우가 많았는데, PPT를 통해 내가 지금 말하고 있는 부분이 어떤 부분인가 계속 상기하면서 발표를 진행하니, 상대방도 내가 말하고자하는 것을 잘 이해하는 것 처럼 느껴졌다.\n- **FUTURE**\n  - 상대방으로부터 피드백 받고 싶은게 있다면, 상대방이 '아 이 사람은 이부분을 피드백받고 싶구나.' 라고 느낄 수 있도록 어필해주어야 한다.\n  - PPT는 내가 무엇을 말하고 있는지 갈피를 잡게하는 가장 좋은 수단인 것 같다. 아니면, 큰 맥락을 기억하고, 내가 무슨 부분을 말하고 있는지, 다음에 해야할 것은 무엇인지 계속 상기하면서 발표하는게 길을 잃지 않고 말을 뱉는 것에 많은 도움을 주는 방법이라고 느꼈다.\n"},{"excerpt":"1. 회고 221104 회고 프로젝트 발표준비 1차 프로젝트 발표 및 피드백 2차 프로젝트 발표 및 피드백 갈무리 1) 전 날, 사다리 타기로 발표를 담당하게되어, 오전은 내내 발표 준비로 하루를 보냈다. 발표를 잘하는 편이 아니고, 짧은 시간 안에 우리팀이 일주일동안 뭘했는지를 효과적으로 어필해야하기 때문에 PPT를 준비했다.\n전체적인 발표틀을 잡고 그…","fields":{"slug":"/22_11_04/"},"frontmatter":{"date":"November 04, 2022","title":"✏️ 2022-11-04 Today I Learn","tags":["TIL","내일배움캠프","스파르타코딩캠프"]},"rawMarkdownBody":"\n## 1. [회고] 221104 회고\n\n1. 프로젝트 발표준비\n2. 1차 프로젝트 발표 및 피드백\n3. 2차 프로젝트 발표 및 피드백\n4. 갈무리\n\n**1)**  \n전 날, 사다리 타기로 발표를 담당하게되어, 오전은 내내 발표 준비로 하루를 보냈다.  \n발표를 잘하는 편이 아니고, 짧은 시간 안에 우리팀이 일주일동안 뭘했는지를 효과적으로 어필해야하기 때문에 PPT를 준비했다.\n전체적인 발표틀을 잡고 그에 맞게 PPT를 구성했다. 남들앞에 서는 것에 익숙치않아, 준비하는데도 입술이 바싹바싹말랐는데 이것을 무서워하면 내 성장이 없겠다라고 생각이 들어, 마음을 계속 다잡았다. 또한, 팀원들도 계속 자신감을 심어주어 너무 감사했다.\n\n![자존감 올려!](/image/221104_01.png)\n\n팀원분들의 회고를 받아 정리를 하는작업도 애를 먹었다. 각 팀원분들께 회고를 요청드리고 받은 글들을 조금은 있어보이게(?) 워딩을 바꾸거나 임팩트있는 업무를 강조하는 식으로 요약하여 PPT에 정리하였다. 몇몇 팀원분은 본인의 성과와 회고를 애매하게 적어놓으셔서, 개인적으로 DM을 드려 어떻게 느낌을 받으셨는지 끈질기게 물어보았다.(죄송..) 결론적으로, 성공적으로 시간내에 모든 준비를 마칠 수 있었다.\n\n**2)**  \n프로젝트 발표회가 시작되었다. 우리 조는 2번째 발표였다.\n말을 할 때 흐리지 않고, 완벽하게 문장을 구현 할 수 있도록 신경쓰면서 노력했다. 발표순서는 아래와 같이 진행되었다.\n\n1. 프로젝트 목적 및 히스토리\n2. 프로젝트 시연\n3. 팀원 별 프로젝트 회고\n4. 팀원 별 코드 자랑 타임\n\n원활하게 발표가 진행되었고, 튜터님의 피드백도 나쁘지 않았다. 무사히 마무리 되었다..\n이후에 마음편히 다른 분들의 발표를 경청했는데, 능력자 분들만 모인조도 보였고, 간신히 프로젝트를 마무리 한 조도 있었다.\n이렇듯 모두 각자의 속도가 다른 것이 발표회를 통해 확연하게 보여서 신기했다.  \n팀원들이 다른 분들의 발표를 듣고, 기가 죽어있는 모습이 보였지만 개인의 속도가 있는 것이니 괜찮다고 다독여 드렸다.\n\n**3)**  \nA반은 다른 튜터님께 다시한번 피드백을 받는 시간을 가졌다.  \n다른 팀들은 홈페이지 UI&UX를 보여드리고, 뼈대에 대해서만 피드백을 받았다. 튜터님도 그 전 히스토리를 모르니, UI&UX에 대한 피드백을 주로 주시는 것 같았다. 따라서, 우리는 그간의 히스토리를 공유드리고, 시연을 하는식으로 발표를 진행하기로 했다. 비록 다른조에 비해 특출난 결과물은 없지만, 어떤 식으로 기획하고 진행하였는지 히스토리를 공유드리고, 홈페이지를 직접 시연하면서 누가 어디를 맡았는지 소개했다. 튜터님께서 조금더 신경써서 봐주시는 느낌이 들었고, 회고까지 찬찬히 봐주시고 피드백 주셔서 감사했다.  \n결론적으론, '흠 잡을 데가 크게 없다' 라는 피드백을 받을 수 있었고, 발표전략이 잘 맞았던 것 같아서 안도하였다.\n\n**4)**  \n이번주를 끝으로 첫번째 프로젝트의 팀원들과 헤어지게 되면서, 아쉬움을 토로하며 KPT를 진행했다.  \n팀원분들은 기술적으로, 나는 계속 팀원들의 문제해결에 도움을 주며 소프트스킬적으로 첫 날 보다는 많이 발전했다는 것이 느껴져서 좋았다.\n첫날은 아무것도 정해진것 없는 혼돈의 도가니였지만, 결론적으로 현시점에 기한안에 프로덕트를 깔끔하게 만들고, 발표까지 마쳐 좋은피드백도 받으면서, 나름(?) 성공적으로 프로젝트 기간이 종료되어 개인적으로 감회가 새로웠다.\n\n팀원들과도 5일동안 많이 친해질 수 있어서 좋았고, 아쉬움에 마지막 사진을 다같이 모여 찍고 마무리했다.\n\n![자존감 올려!](/image/221104_02.png)\n\n## 2. 발표자료\n\n[![프로젝트 시연 비디오](https://img.youtube.com/vi/EvmyjPKNl40/0.jpg)](https://youtu.be/EvmyjPKNl40)\n\n- [프로젝트 정리 문서](https://peach-sort-527.notion.site/4-3-6d05934d672a4a3ea9bdd3105b4308e8)\n- [발표 자료](https://www.canva.com/design/DAFQ8Ls5yH8/9WEPsEOFx8Xx7vlvnjTkqw/view?utm_content=DA[…]mpaign=designshare&utm_medium=link&utm_source=publishsharelink)\n"},{"excerpt":"1. 알고리즘 영어가 싫어요 문제 영어가 싫은 머쓱이는 영어로 표기되어있는 숫자를 수로 바꾸려고 합니다. 문자열 numbers가 매개변수로 주어질 때, numbers를 정수로 바꿔 return 하도록 solution 함수를 완성해 주세요. 2. git fork를 이용한 git 협업 플로우 이번 프로젝트 일 때, fork를 이용해서 진행했는데 뭔가 예전에 …","fields":{"slug":"/22_11_03/"},"frontmatter":{"date":"November 03, 2022","title":"✏️ 2022-11-03 Today I Learn","tags":["TIL","git","알고리즘","내일배움캠프","스파르타코딩캠프"]},"rawMarkdownBody":"\n## 1. [알고리즘] 영어가 싫어요\n\n### 문제\n\n영어가 싫은 머쓱이는 영어로 표기되어있는 숫자를 수로 바꾸려고 합니다. 문자열 numbers가 매개변수로 주어질 때, numbers를 정수로 바꿔 return 하도록 solution 함수를 완성해 주세요.\n\n```javascript\nfunction solution(numbers) {\n  const numbersAsString = [\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n  ]\n  let result = \"\"\n  let temp = \"\"\n  for (let string of numbers) {\n    temp += string\n    if (numbersAsString.includes(temp)) {\n      result += numbersAsString.indexOf(temp)\n      temp = \"\"\n    }\n  }\n\n  return Number(result)\n}\n```\n\n### 2. [git] fork를 이용한 git 협업 플로우\n\n이번 프로젝트 일 때, fork를 이용해서 진행했는데 뭔가 예전에 했던 방식이랑 다르게 동작해서 계속 팀원들이 최신버전의 코드를 받기 위해 github에서 sync fork를 한뒤 진행했다. 원래는 upstream과 origin을 각각두고, upstream에서 계속 최신코드를 받아서 사용해야하는데 이번엔 origin만 두게되어.. 좀 희안한 플로우가 되었다... 다음엔 이런실수를 하지 않아야지..\n\n![이상적인 Fork협업 플로우](/image/221103_01.png)\n\n## 2. [회고] 221103 회고\n\n1. 프로젝트 마무리\n\n**1)**  \n오늘까지 프로젝트를 완성해야 내일 넉넉하게 발표준비를 할 수 있기 때문에, 각 임무를 열심히 수행 중이신 팀원들에게 죄송하지만..\n어쩔수없이 시간을 정해놓고 문제를 해결하길 요청드렸다.\n다행히도 다들 git에서 문제를 겪으신것 빼고는, 시간안에 기능을 구현하셔서 제출해주셨다.  \n그 과정에서 다들 내 덕에 문제를 해결했다는 피드백을 주셨는데, 다들 문제를 해결하는 과정에서 확신이 없다보니 맞는방향으로 가고있음에도 불구하고 그걸 적용하지 않고 있다가, '잘하고 계십니다!'라는 피드백을 드렸을 때 그제야 코드를 적용하시는 모습을 보면서 내가 팀원분들의 생각을 막고 있는 것 같다는 생각이 들어서 많이 죄송했다.\n\n아마도 나중엔 팀원들이 내 도움이 아닌 본인 스스로의 능력으로 코드를 작성하셨다는 것을 깨달을 것이라고 생각한다.\n\n좀 민망 모먼트가 있었는데, 서버-클라이언트 연결을 하고, 각 페이지에 해당되는 방명록만 받아볼 수 있는 기능을 담당하는 팀원이 작업을 마치고 후련해하고 계셨는데, 할당업무 범위에 대한 오해가 있었다. 우리 프로젝트는 메인페이지 + 각 멤버별 페이지로 구성되어 있는데, 팀원분은 각 멤버별 페이지에서만 해당기능을 동작하도록 만드는 것이라고 생각했고, 나는 메인페이지를 포함한 모든페이지에서 동작하도록 만드는 것을 제안드린 것이었다. 이런 상황을 말씀드리니 팀원분께서 많이 부담스러워 하시는 것이 보였다. 그도그럴게, 어제부터 몇십시간동안 집중을 유지하며 오셨고, 그걸 다 해결했다고 생각했는데 그게 아니라고 하니 아마 소위 '멘붕'이 오셨던게 확실해보였다.  \n사실 메인페이지 내용을 불러오는게 다른페이지에 작성하셨던 코드와 별반차이는 없지만, 그게 이미 '멘붕'상태인 팀원에게는 받아들이기 버거울 수 있다는 생각을 했다. 가이드를 머리로는 이해하셨는데, 행동으로 하실 체력이 없어보였다..\n따라서, 내가 콘솔같은 자잘한 것들을 정리하면서, 해당부분을 작업해드리기로 했다. 근데, 내가 작업하는 과정을 공유해달라고 하셔서 작업과정을 화면을 공유하고 팀원들이 내가 지금 어떤 행동을 하고 있는지 알 수 있도록 말하면서 진행했다. 근데 정신을 차리고보니 zep을 봤는데, 멘토님과 매니저님께서 오셔서 그 과정을 구경하고 계셨다(!)\n멘토님께 프로젝트 관여는 최소한으로 해달라는 미션(?)를 받았기 때문에 내가 코드를 작성하고 있는것을 들킨 상황이 민망했다..\n\n그래도, 처음에 서먹했던 팀원들이 내가 할당한 업무를 통해 성취감을 얻고, 성장한 것이 보여서 뿌듯했다.\n.  \n.  \n.  \n근데 왜 제가..발표죠?\n\n![사다리타기로 발표 걸림](/image/221103_02.png)\n\n## 3. [회고] 내일 다짐\n\n- 두괄식으로 이야기하기\n- 머릿속에 생각을 정리한 뒤, 말하기\n- 남들앞에 서는 것을 두려워하지 않기\n"},{"excerpt":"1. JSON과 XML XML(eXtensible Markup Language) 마크업 언어로서, 데이터를 정의할 때 쓰인다. 해당 문서의 요소는 데이터로서, 유저는 작성된 데이터를 저장하여 다른곳에 전송한다. HTML과 유사한 방식으로 데이터에 해당되는 태그를 열고 닫음으로서, 데이터를 정의한다. XML에는 데이터설명,버전을 적을 수 있어, 이를 이용해…","fields":{"slug":"/22_11_02/"},"frontmatter":{"date":"November 02, 2022","title":"✏️ 2022-11-02 Today I Learn","tags":["TIL","스파르타코딩캠프","내일배움캠프"]},"rawMarkdownBody":"\n## 1. JSON과 XML\n\n### XML(eXtensible Markup Language)\n\n```xml\n<xml version='1.0'>\n  <toy>robot</toy>\n  <fruit>apple</fruit>\n</xml>\n```\n\n- 마크업 언어로서, 데이터를 정의할 때 쓰인다.\n- 해당 문서의 요소는 데이터로서, 유저는 작성된 데이터를 저장하여 다른곳에 전송한다.\n- HTML과 유사한 방식으로 데이터에 해당되는 태그를 열고 닫음으로서, 데이터를 정의한다.\n- XML에는 데이터설명,버전을 적을 수 있어, 이를 이용해 데이터의 무결성을 보장한다.\n- 따라서, 은행,정부문서와 같은 데이터의 무결성이 중요한 곳에서 XML을 주로 사용한다.\n- 문서를 파싱하여, 가공가능 한 데이터로 만드는 것에 시간이 필요하다.\n\n### JSON(JavaScript Object Notation)\n\n```javascript\n{\n    \"toy\" : \"robot\",\n    \"fruit\" : \"apple\"\n}\n```\n\n- key : value 쌍으로 이루어진, 데이터 형태\n- JSON은 자바스크립트 함수인 eval()로 파싱되어 해석된다.\n- 문자열을 전송받은 후 곧바로 문자열을 파싱하므로 XML에 비하여 가공속도가 빠르다.\n- 따라서, 빨리 읽고 쓸 수 있다는 장점이 있다.\n- 하지만, 데이터의 버전이나, 설명같은 부가설명을 할 수 없기 때문에 무결성을 보장 할 수 없다.\n- 따라서, 무결성 보장을 위한 검증을 추가적으로 신경써줘야한다.\n- JSON은 XML과 다르게, 배열사용이 가능하다.\n\n## 2. [회고] 221102 회고\n\n1. 팀 프로젝트 진행\n2. 팀원들 문제 해결1 : git flow\n3. 팀원들 문제 해결2 : 업무 할당\n\n**1)**  \n개인 게시판 마크업이 끝나고, 팀원들의 모든 HTML파일을 모았다. 팀원명을 클릭했을 때, 클릭한 팀원의 페이지로 이동하는 로직을 작성해야했다.\n팀원들이 5명인데, 기존에는 팀원들 5명에대한 html을 rendering하는 함수를 일일히 작성해야하는지 고민했다.\n\n같은 기능이 반복될 것 같아서, 지속적으로 고민하다 갑자기 문득떠오른게 query parameter을 이용하여, 동적으로 html파일을 선택하고 rendering하는 방법이었다!\nquery parameter 전달기능을 곧바로 `app.py`에 적용해보았는데 잘 동작하길래 곧바로 아래의 api를 작성하여 적용하였다.\n이제 우리 팀페이지는 하나의 함수에서 동적으로 선택되어 보여진다.\n\n```python\n@app.route(\"/members\", methods=[\"GET\"])\ndef members():\n    parameter_dict = request.args.to_dict()\n    name = parameter_dict['name']\n    return render_template(f'members/{name}.html')\n```\n\n**2)**  \n나의 욕심으로 이번 프로젝트에서 팀원들이 git을 사용하도록 제안하였다. 아침에 *진실의 방(=휴게실)*에서 git을 사용하는 모습을 간단히 시연해드렸는데, 처음에 3분만 계셨는데 시연이 모두 끝나고 돌아보니깐 팀원들이 모두 시연을 보러와주셨다. 휴게실 책상이 작은데 옹기종기 모여있는 모습이 귀여웠다.\npublic repo에 권한만 있다면, 다른팀원들도 PR을 없이 push/pull 다 할 수 있을 줄 알았는데, 내 착각이었다.\n역시나 권한문제가 발생하였고, 내 repo를 fork해서 PR을 날려야 하는 상황이 되었다.\n\n죄송하다고 말씀드리고 모든 팀원들의 `remote origin`을 fork repo로 변경하는 것을 도와드렸다. 원래는 가이드 드릴 때 직접적인 커멘드를 말씀드리지 않았는데, 배우지 않은 부분이라 지금어떤일을 하고 있는지 정도만 이해시키고 내가 커멘드를 직접 말씀드리며 가이드를 드렸다.\n몇몇 분들은 아직 아리까리하시다고 피드백 주셨지만, 금새 적응하여 PR을 하시고, 재미있어하는 모습을 보여주셔서 내가 다 뿌듯했다.\n\n![팀원들이 커밋을 보낸순간](/image/221102_01.jpg)\n\ngit문제를 해결해드리면서, 가장 신경을 썻던 것은 '내가 문제를 직접적으로 해결해드리지 않는것'과 '정답을 말하지 않는 것'이었다. 가이드가 끝나고 난 뒤, 혹시 의사를 결정하는데 있어서 내 의견이 많이 방해가 되었는지, 문제를 해결하고 난 뒤 온전히 본인 것이라는 기분이 들지 않는지, 흐름은 이해되셨는지 체크했다. 다행히도, 긍정적인 반응들을 보내주셔서 감사했다.\n\n**3)**  \n팀원들이 모두 집중 할 수 있는 프로젝트가 되었으면 해서 끊임없이 어떻게 업무를 분배하면 좋을지 고민했다. 메인페이지 + 개인페이지의 구성으로 이루어진 프로젝트 특성상 개인페이지의 작업을 모두 마친 현상태에서, 메인페이지로 오버헤드가 몰릴 것이 당연한 상황이었다.\n따라서, 메인페이지에 업무가 모이지 않도록 다른 곳으로 업무를 분산시키는 것이 좋겠다는 생각을 했고, 모든 페이지를 모아서 작업을 할 때, 필요한 작업들을 추려서 팀원숫자만큼 나누어보았다.  \n어쩌다보니, 프로젝트 리드(?) 같은 역할을 수행하게 되었는데 팀장과 역할이 겹치는 부분이 많아서 불편해 하실 수 있겠다는 생각이 들어 내가 하는 고민들을 공유하는게 낫겠다는 판단이 들어 팀장님께 내가하고 있는 고민들을 공유드리기 위해 미팅을 요청드렸다.  \n오히려 내 고민을 이해해주시고, 오히려 생각못한 상황들을 대신 생각해줘서 고마웠다 라는 말씀을 해주셔서 너무 감사했다. 모두가 끊임없이 작업 할 수 있는 환경을 위해 남은 팀원들에게 git branch 를 생성하는 방법을 전달해주었고, 팀원들이 작업을 시작했다.  \n나는 남은 Due까지 모두가 지치지 않고, 프로젝트를 끝 마칠 수 있도록 돕고싶고, 도울것이다. 팀원들의 성장을 막는 행동은 지속적으로 신경써서 하지 않으려고 한다.\n\n## 3. [회고] 내일 다짐\n\n- 팀원의 생각흐름에 관여하지 않기, 흐르는 대로 함께가고, 그곳에서 최선의 방법을 찾아서 제시해주기.\n- 상대방의 성취감을 뺏지않으려고 노력하기\n- 자바 기본 문법 3단원까지 공부하기\n"},{"excerpt":"1. 회고 221101 회고 개인페이지 제작 팀원들 문제 해결 튜터님과 상담 1) 오늘은 모든 팀원이 개인페이지 개발에 집중하기로 한 날이다. 어젯밤동안 구상한 UI를 Figma를 이용해 구현해보면서 개인페이지에 대한 틀을 잡았다. Figma 구상 WIX의 템플릿에서 영감을 받았다. 레퍼런스 템플릿 모바일은 따로 구상을 한게 아니라, 계속 CSS를 수정하…","fields":{"slug":"/22_11_01/"},"frontmatter":{"date":"November 01, 2022","title":"✏️ 2022-11-01 Today I Learn","tags":["CSS","TIL","스파르타코딩캠프","내일배움캠프"]},"rawMarkdownBody":"\n## 1. [회고] 221101 회고\n\n1. 개인페이지 제작\n2. 팀원들 문제 해결\n3. 튜터님과 상담\n\n**1)**  \n오늘은 모든 팀원이 개인페이지 개발에 집중하기로 한 날이다. 어젯밤동안 구상한 UI를 Figma를 이용해 구현해보면서 개인페이지에 대한 틀을 잡았다.\n\n![Figma 구상](/image/221101_01.png)\n\nWIX의 템플릿에서 영감을 받았다.\n\n![레퍼런스 템플릿](/image/221101_02.png)\n\n모바일은 따로 구상을 한게 아니라, 계속 CSS를 수정하면서 이쁜모양을 찾아보고 최종적으로 디자인을 결정하였다.\n\n**2)**  \n모든 개발을 마치고, 팀원들이 겪는 어려움을 해결해드렸다.  \n어려움을 해결해드리는 과정에서 가장 신경썼던 점은, 스스로 문제를 해결하는 즐거움을 팀원들에게 뺏지 않는 것이었다.  \n한 발자국만 더 가면 문제가 해결되는 경우가 많았기 때문에, 만약 내가 정확한 문제를 짚어 문제를 해결하면 해결하는 속도는 빨라지겠지만, 당사자입장에서는 당장은 좋아도 '아 조금만 더 생각해볼걸'이라는 후회가 남는 경우가 많을 거라고 생각했다.(실제로도 내가 겪음)  \n따라서, 팀원분들이 겪고계신 문제를 공유해주시면, 우선은 화면을 보면서 정확한 원인을 파악하고 문제가 발생하는 순서를 같이 정렬해보며, 이 문제가 왜 발생했는지 고민해보실 수 있도록 유도했다. 보통은 이 과정 중에 '아!' 하시면서, 문제를 해결하시는 경우가 많았다.  \n대부분 실패를 두려워하시고, 자신감이 없는 모습을 보이셔서 안타까웠는데, 그럴때마다 '잘하고계십니다! 문제가 있으면 에러를 보여줄거에요. 생각하신 코드를 한번 적어보세요!' 라고 말씀드렸다.  \n팀원분들께 '생각의 주도권을 뺏지 않았는지', '설명해드리는 과정에서 속도가 적절했는지' 등등의 피드백을 요청드렸고, 다행이도 긍정적인 피드백을 주셨다.  \n다만, 지금까지는 내가 겪어봤고 아는 문제였기에 이런 스탠스를 지닐 수 있었지, 내가 모르는 문제들에 대해서도 일목요연하게 문제를 해결 할 수 있을지는 의문이긴하다.\n\n**3)**  \n튜터님과 저녁에 상담을 진행했다. 내 경험들을 들으시고, 내가 현시점에 겪고 있는 고민들을 정확히 짚어주셨다.\n'어느 깊이까지 피드백을 드리면 좋을지', '피드백으로 팀원들의 생각을 방해하는게 아닐지' 또 이후에, 기술적인 고민에 대해서 솔직하게 공유드렸다.  \n나는 어떤 기술을 습득해서 기획대로 만드는 것에는 자신있는데, 이 기술이 어떤원리로 동작하고 왜 사용하는지에 대해서는 잘 말하지 못한다.\n따라서, 이 고민을 공유드렸고, 튜터님께서는 백엔드에서는 문제가 발생했을 때 크리티컬한 문제가 발생하고, 그 원인을 정확하게 진단하기 위해서는 어떤원리로 동작하는지 이해하고 공부해야한다고 답변을 주셨다.  \n또한, 알고리즘에 대해 자세히 알지 못한다고 말씀드리니 '그건 지금부터 하시면 됩니다!'라고 유쾌하게 말씀주셨다.\n퇴사이후 지난 시간동안 했던 스택선택과 커리어적 고민들을 털어놓으니 후련했다.  \n자바강의를 미리들으며 공부해보는 것을 추천받았는데, 내일부터 한번 들어보려고 한다.\n\n## 2. [회고] 내일 다짐\n\n- 상대방의 성취감을 뺏지않으려고 노력하기\n- 상대방의 말을 듣기\n- 말하고자하는 것에 대해 명확히하고, 정리가 된 후 입밖으로 말하기\n- 서로 모르는 문제에 대해, 문제를 해결해 나가는 과정을 의식하고 기록하기\n- 개인 공부 시작 (자바 + 알고리즘)\n"},{"excerpt":"1. git git 구조의 이해 git 구조는 디렉토리 + 스테이징 + 저장소의 3가지로 구성되어 버전을 관리한다. 디렉토리 버전을 관리할 코드가 위치한 경로. 즉, .git파일이 위치하는 파일 자체를 의미한다. 스테이징 디렉토리에서 감지된 변화가 저장되는 임시 저장소. (git add 커멘드를 이용하여 디렉토리 -> 스테이징으로 변화를 저장한다.) 저장…","fields":{"slug":"/22_10_31/"},"frontmatter":{"date":"October 31, 2022","title":"✏️ 2022-10-31 Today I Learn","tags":["git","TIL","스파르타코딩캠프","내일배움캠프"]},"rawMarkdownBody":"\n## 1. [git] git 구조의 이해\n\ngit 구조는 디렉토리 + 스테이징 + 저장소의 3가지로 구성되어 버전을 관리한다.\n\n1. 디렉토리\n   > 버전을 관리할 코드가 위치한 경로. 즉, .git파일이 위치하는 파일 자체를 의미한다.\n2. 스테이징\n   > 디렉토리에서 감지된 변화가 저장되는 임시 저장소. (git add 커멘드를 이용하여 디렉토리 -> 스테이징으로 변화를 저장한다.)\n3. 저장소\n   > 스테이징에서 commit한 변화를 하나로 묶어 버전으로 저장소에 저장한다.\n   > 저장소에 저장된 코드는 github과 같은 코드저장소에 `push` 하여 사용한다.\n\n## 2. [git] git pull VS git fetch\n\ngit fetch와 pull은 원격저장소의 코드의 변화를 감지하는 기능이 있다는데에서 공통점을 가지고 있다.  \n차이점은, fetch는 원격저장소의 변화가 있어도 로컬의 코드에 덮어쓰지 않고, pull은 원격저장소의 변화를 코드에 덮어씌운다.\n\n## 3. [회고] 221031 회고 : 이기적 개발\n\n오늘 처음 내일배움캠프를 참여하여, 팀프로젝트를 진행했다.  \n미니프로젝트의 주제는 사전캠프를 통해 배운 것들을 이용해, 팀 소개 페이지를 만드는 것이었다.  \n팀 협업을 너무 오랜만에 해서 좋았지만 두려움도 있었다.  \n그래서 그런지, 과거의 좋지않은 습관이 나왔다. 주변을 돌아보지 않고 나도모르게 API 문서를 와다다다 작성하고 있었다.  \n결과적으로 초기 API는 5개가 나왔다. 이후에 매니저님께 문서 피드백 받았는데, 기한을 맞출 수 있는지 우려하셨고 모두의 속도에 맞출 수 있는 대안을 제시해주셨다. 매니저님의 피드백을 듣고, 팀원들의 얼굴을 보았다. 지쳐보이는 기색이 역력했다.  \n죄송하다고 말씀드리고, API를 기초적인 기능만 빼고 모두 수정하여, 2개만 남겼다.\n과연, 나는 오늘 팀원들에게 편안함을 줄 수 있는 동료였는가? 라고 평가를 해보았을 때, 전혀 아니라고 생각했다.\n\n## 4. [회고] 내일 다짐\n\n과거의 쓸데없는 경험은 버리자. 겸손하자.  \n나는 팀 협업경험이 부족했다.  \n그렇기에 팀과 함께 소통하는 개발자로 성장하고 싶었고, 따라서, PBL(Project Based Learn)방식으로 교육을 진행하는 내일배움캠프에 합류했다.  \n팀원들의 속도에 맞출 수 있는 개발자로 성장하자.  \n'제가 예전에 해봤어요.' 라는 설득력없는 근거(라고 쓰고 고집이라고 읽는다)보다, 모두가 납득할 수 있는 근거로 모두를 설득할 수 있는 개발자가 되자. 남을 기분좋게 만드는 사람이 되자.\n"},{"excerpt":"1. Javascript 실행컨텍스트 추후 추가예정 2. Javascript 스코프 체인 추후 추가예정 3. CS HTTP 상태코드 HTTP 상태코드 포스팅","fields":{"slug":"/22_09_02/"},"frontmatter":{"date":"September 02, 2022","title":"✏️ 2022-09-02 Today I Learn","tags":["TIL","Javascript","CS"]},"rawMarkdownBody":"\n## 1. [Javascript] 실행컨텍스트\n추후 추가예정\n\n## 2. [Javascript] 스코프 체인\n추후 추가예정\n\n## 3. [CS] HTTP 상태코드\n<a href=\"/HTTP_상태코드\">HTTP 상태코드 포스팅</a>"},{"excerpt":"1. 2xx Success 200 : 성공 201 : 성공 + 새로운 리소스가 생성됨. 새롭게 생성된 리소스의 주소를  헤더에 담아 보낸다. 202 : 요청이 접수되었으나, 당장 처리하지 않음 (ex : 배치) 204 : 서버가 요청을 성공적으로 수행했지만, 응답에 보낼 데이터가 없음. (ex: 웹문서 편집기 자동저장) 2. 3xx Redirection …","fields":{"slug":"/HTTP_상태코드/"},"frontmatter":{"date":"September 02, 2022","title":"HTTP","tags":["TIL","Network","HTTP"]},"rawMarkdownBody":"\n## 1. 2xx Success\n- **200** : 성공\n- **201** : 성공 + 새로운 리소스가 생성됨. 새롭게 생성된 리소스의 주소를 `Location` 헤더에 담아 보낸다.\n- **202** : 요청이 접수되었으나, 당장 처리하지 않음 (ex : 배치)\n- **204** : 서버가 요청을 성공적으로 수행했지만, 응답에 보낼 데이터가 없음. (ex: 웹문서 편집기 자동저장)\n\n## 2. 3xx Redirection\n웹브라우저는 `3xx 응답 + Location 헤더`의 응답이 오면 해당주소로 자동이동한다.\n이 때 응답주소에 따라 **영구적 리다이렉션**, **일시적 리다이렉션** , **특수 리다이렉션**으로 구분된다.\n- 영구적 리다이렉션(301, 308) : 특정 리소스의 URI가 영구적으로 리다이렉트 된다.\n> ##### 301 Moved Permanently \n> 실무에 많이 쓰임. 새로고침 시 요청이 GET으로 변경되고, 본문이 제거 될 수 있음.<br/>\n이용자는 입력을 다시하는 경험을 할 수 있음. 하지만, 보통 입력하는 폼 자체가 모두 변경되기 때문에, 사용자는 체감을 거의하지 못함.\n> ##### 308 Parmanent Redirect\n> 새로고침 시 요청을 POST로 변경하고, 본문을 유지함.\n\n- 일시적 리다이렉션(302, 307, 303): 특정 리소스의 URI가 일시적으로 리다이렉트 된다.\n> ##### 302 Found\n> 새로고침 시 요청이 GET으로 변경되고, 본문이 제거될 수 있음\n> ##### 307 Temporary Redirect\n> 302와 기능은 같으나, 새로고침 시 요청메서드와 본문을 이전과 동일하게 유지함.(요청메서드 변경X)\n> ##### 303 \n> 302와 기능은 같으나, 새로고침 시 요청메서드를 **무조건** GET으로 변경됨.\n>> ###### PRG(POST/Redirect/GET) - 일시적 리다이렉션\n>> PRG 사용으로 중복주문상황을 막을 수 있다.\nPRG를 사용하지 않은 상황에선 주문완료이후 유저가 새로고침을 했을 때, 동일 POST 요청이 들어가므로, 의도치않게 동일 주문이 1개 더 생기는 상황이 발생 할 수 있음\nPRG를 사용하면, 리다이렉트 후 보여진 화면에서 GET만  호출되기 때문에, 유저가 새로고침을해도 동일주문이 생성되지 않음.\n\n- 특수 리다이렉션(300, 304) : 결과대신 캐시를 이용한다.\n> ##### 300 Multiple chioce \n> 요청에 가능한 응답이 두 개 이상 있음을 나타냄 사용자 에이전트 또는 사용자는 둘 중 하나를 선택해야 함. 응답 중 하나를 선택하는 표준화된 방법이 없기 때문에 이 응답 코드는 거의 사용되지 않음. 서버가 원하는 것을 선택하면 Location 헤더를 생성해야함.\n> ##### 304 Not Modified\n> 주로, GET, HEAD 요청 시 사용한다.\n서버가 클라이언트에게 캐시가 만료되지 않았기 때문에 클라이언트에 저장된 캐시를 사용할 수 있도록 유도한다. 응답에 메시지 바디를 포함하면 안된다.\n\n## 3. 4xx Client Error\n오류의 원인이 클라이언트에 있기에, 같은 요청을 보냈을 시 100%실패함.\n> ##### 400 Bad Request\n클라이언트가 요청내용(파라미터, 메시지)을 다시 검토하고 보내야함.\n> ##### 401 Unauthorized\n클라이언트가 해당리소스에 대한 인증이 필요함. 401 오류 발생시에 응답에 WWW-Authenticate 헤더와 함께 인증방법을 성명해야한다.\n>> - Authentication : 인증(로그인)이 필요\n>> - Authorization : 인가(권한 부여)가 필요\n> ##### 403 Forbidden\n요청을 이해했지만, 권한이 없어 접근이 불가함.\n> ##### 404 Not Found\n요청리소스를 서버에서 찾을 수 없거나, 클라이언트가 권한이 없는 리소스에 요청을 보냈는데, 그 리소스를 숨기고 싶을때\n\n## 4. 5xx Server Error\n> ##### 500 Internal Server Error\n서버 내부문제로 오류발생\n> ##### 503 Service Unavalidble\n서버가 일시적인 과부하 또는 예정된 작업을 요청을 처리할 수 없음. Retry-After 헤더로 얼마 뒤에 복구 되는지 보낼 수 있음. \n\n## !중요!\n500에러는 정말 서버에 문제가 있을 때 내는 것이기 때문에, 비즈니스 로직 상 발생한 문제에 대해서 500보단 2xx, 4xx대 코드로 해결해야함.\n"},{"excerpt":"1. 라운드 로빈 스케쥴링 시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 간에 우선순위를 두지 않고 순서대로 시간단위로 CPU를 할당하는 스케쥴링 방식입니다.\n추후 학습할 자바스크립트 이벤트 루프의 동작방식이 라운드 로빈 스케쥴링 방식입니다. 2. 자바스크립트 프로토타입 프로토타입 학습 링크","fields":{"slug":"/22_08_30/"},"frontmatter":{"date":"August 30, 2022","title":"✏️ 2022-08-30 Today I Learn","tags":["TIL","Javascript","CS"]},"rawMarkdownBody":"\n## 1. 라운드 로빈 스케쥴링\n시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 간에 우선순위를 두지 않고 순서대로 시간단위로 CPU를 할당하는 스케쥴링 방식입니다.\n추후 학습할 자바스크립트 이벤트 루프의 동작방식이 라운드 로빈 스케쥴링 방식입니다.\n\n\n## 2. 자바스크립트 프로토타입\n<a href=\"/JS_프로토타입\">프로토타입 학습 링크</a>\n"},{"excerpt":"prototype 원형을 의미합니다.\n원형의 속성을 조회하고 싶다면 아래와 같이 조회하면 된다. 하지만 new 키워드를 통해서 만든 복제품 에게는 원형의 속성을 조회할 수 없다.\n예를 들어 아래의 코드에서는 prototype 이 undefined 로 동작한다. [Prototype] 원형의 속성의 주소를 저장하고 있는 내부 속성인  을 이용하여, 자식들에게…","fields":{"slug":"/JS_프로토타입/"},"frontmatter":{"date":"August 30, 2022","title":"프로토타입에 관하여","tags":["TIL","Javascript","prototype"]},"rawMarkdownBody":"\n## prototype\n원형을 의미합니다.\n원형의 속성을 조회하고 싶다면 아래와 같이 조회하면 된다.\n```javascript\nObject.prototype // {...}\n```\n하지만 new 키워드를 통해서 만든 **복제품** 에게는 원형의 속성을 조회할 수 없다.\n예를 들어 아래의 코드에서는 prototype 이 undefined 로 동작한다.\n```javascript\nconst obj = new Object()\nobj.prototype // undefined\n```\n\n## [[Prototype]]\n원형의 속성의 주소를 저장하고 있는 내부 속성인 `[[Prototype]]` 을 이용하여, 자식들에게 할당한다.\n조회는 `__proto__` 혹은 `getPrototypeOf()`을 이용하여 접근가능하다.\n```javascript\nconst Foo = {\n  name : 'foo'\n}\n\nconst Bar = {\n  __proto__ : Foo\n}\n\nconst Coo = Object.create(Bar)\n\nBar.name // 1. foo\nCoo.name // 2. foo\n```\nBar와 Coo에는 직접적인 name이라는 프로퍼티가 할당되어 있지않다. 하지만, 어떻게 name이라는 속성에 접근할 수 있었을까?\nname을 조회하기 위해서 자바스크립트 엔진은 현재 인스턴스에 name이란게 없다면, 내부속성인 `[[Prototype]]` 을 순차적으로 조회하며 name이라는 속성이 있는지 조회한다.\n\n아래는 Bar.name 시 foo가 출력되는 순서이다.\n> 1. Bar.name -> 없음\n> 2. Bar.`[[Prototype]]`.name (=Foo.name) -> ***있음!***\n> 3. foo 출력\n\n아래는 Coo.name 시 foo가 출력되는 순서이다.\n> 1. Coo.name -> 없음\n> 2. Coo.`[[Prototype]]`.name (=Bar.name) -> 없음\n> 3. Coo.`[[Prototype]]`.`[[Prototype]]`.name (=Foo.name) -> ***있음!***\n> 4. foo 출력\n\n실제로 `[[Prototype]]` 이 쓰이진 않고 위에서 언급한 것 처럼 `__proto__` 혹은 `getPrototypeOf()`를 이용해 조회할 수 있다.\n\n그렇다면 아래의 상황에서는 어떻게 동작할까? \n```javascript\nconst Foo = {\n  name : 'foo'\n}\n\nconst Bar = {\n  __proto__ : Foo\n}\n\nconst Coo = Object.create(Bar)\n\nBar.name // 1. foo\n\nCoo.name = 'coo' \n\nFoo.name // 2. ?\nBar.name // 3. ? \nCoo.name // 4. ? \n```\n\n정답은 \n> 2. foo\n> 3. foo \n> 4. coo \n이다. \n\n2, 3의 동작은 위와 같지만, 4의 동작이 조금 달라진다.\n> 1. Coo.name -> 있음\n> 2. coo 출력\n\n새롭게 name을 자식에 할당함으로서, `[[Prototype]]`을 조회하지 않고, 곧바로 name을 가져올 수 있었다.\n\n## 프로토타입 체인\n위의 과정에서 아래와 같은 과정을 거쳤다.\nCoo.`[[Prototype]]`.name (=Bar.name) \nCoo.`[[Prototype]]`.`[[Prototype]]`.name (=Foo.name)\n\n이 처럼 없는 속성을 계속 연결된 `[[Prototype]]`주소를 통해 찾아내려가는 현상이 마치 체인처럼 이어졌다고하여, **프로토타입 체인** 이라고 명명한다.\n\n## constructor\nconstructor는 new 키워드를 이용하여 생성된 인스턴스가 자신을 낳은 주체가 무엇인지 표현하기 위해 사용되는 것이다.\n```javascript\nconst array = new Array()\narray.constructor // function Array\n\nfunction Foo () {}\nconst foo = new Foo()\nfoo.constructor // function Foo\n\n.\n.\n.\n```\n\n### 참고\nhttps://tecoble.techcourse.co.kr/post/2021-06-14-prototype/\nhttps://ko.javascript.info/function-prototype"},{"excerpt":"1. 이벤트 실행 우선순위 인라인 이벤트실행 -> addEventListener 이벤트 실행\n인라인 이벤트는 event 객체가 parameter로 넘겨지지 않습니다. 2. 버블링과 캡쳐링 버블링과 캡쳐링에 대하여","fields":{"slug":"/22_08_29/"},"frontmatter":{"date":"August 29, 2022","title":"✏️ 2022-08-29 Today I Learn","tags":["TIL","Javascript","DOM Event"]},"rawMarkdownBody":"\n## 1. 이벤트 실행 우선순위\n인라인 이벤트실행 -> addEventListener 이벤트 실행\n인라인 이벤트는 event 객체가 parameter로 넘겨지지 않습니다.\n\n## 2. 버블링과 캡쳐링\n<a href='/JS_버블링과캡쳐링'>버블링과 캡쳐링에 대하여</a>"},{"excerpt":"1. 버블링 정의 한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작하는 현상.  2. 캡쳐링 정의 이벤트가 상위에서 하위로 전달되며 핸들러를 실행하는 현상.  위의 구조에서 c를 클릭했을 경우, 이벤트가…","fields":{"slug":"/JS_버블링과캡쳐링/"},"frontmatter":{"date":"August 29, 2022","title":"이벤트 버블링/캡쳐링","tags":["TIL","Javascript","DOM Event"]},"rawMarkdownBody":"\n## 1. 버블링 정의\n> 한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작하는 현상.\n\n<img src=\"https://ko.javascript.info/article/bubbling-and-capturing/event-order-bubbling.svg\" width=\"300\" alt=\"[출처]javascript korea\"></img>\n\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"handler\">\n        </div>\n    </div>\n</div>\n```\n\n## 2. 캡쳐링 정의\n> 이벤트가 상위에서 하위로 전달되며 핸들러를 실행하는 현상.\n\n<img src=\"https://ko.javascript.info/article/bubbling-and-capturing/eventflow.svg\" width=\"300\" alt=\"[출처]javascript korea\"></img>\n\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"handler\">\n        </div>\n    </div>\n</div>\n```\n\n위의 구조에서 c를 클릭했을 경우, 이벤트가 a -> b -> c 로 전파되는 현상을 의미한다.\n다음과 같이 event 를 등록 할 떄, capture option을 활성화하여 사용한다.\n```javascript\nel.addEventListener('click', event , {capture: true})\n\n// or \n\nel.addEventListener('click', event , true)\n```\n\n\n\n## 3. stopPropagation\n> propagation의 뜻은 **번식** 이다.\n부모 element로의 캡쳐링/버블링을 막기위해선, stopPropagation 을 사용한다.\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"(e)=>e.stopPropagation()\">\n        </div>\n    </div>\n</div>\n```\n\n을 실행하게 되면, 이벤트는 c에서만 실행되게 된다.\n\n\n## 4. stopImmediatePropagation\n같은 레벨에 여러가지 이벤트 리스너가 등록되어 있을 경우에, stopPropagation을 사용하면\n동일레벨에서의 메서드 실행을 제어하지 못한다.\n\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"A함수;B함수\">\n        </div>\n    </div>\n</div>\n```\n위의 케이스에서 A함수의 실행만 시키고 싶어 stopPropagation을 함수내부에서 호출하여도, 같은레벨의 B함수는 계속 실행된다.\n이유는 stopPropagation은 상위레벨로의 이벤트 전파만 방지하기 때문이다.\n\n위의 케이스에서는 stopImmediatePropatation을 사용하여, 같은레벨로 이벤트가 전파되는 것을 방지해준다.\n\n## 5. Bubbling 되지않는 메서드\n* focus \n\n## 6. event.target vs event.currentTarget vs event.eventPhase\n* **event.target :** 실제 이벤트가 발생한 타겟.\n* **event.currentTarget :** 현재 이벤트가 벌어지고 있는 모타겟.\n* **event.eventPhase :**  현재 이벤트 흐름 단계(캡처링=1, 타깃=2, 버블링=3)\n\n## 7. 버블링을 굳이 막을 필요는 없다.\n지금은 상위 요소에서 이벤트가 어떻게 쓰일지 확실치 않더라도, 추후에 버블링이 필요한 경우가 생기기 때문에 stopPropagation의 사용은 추천하지 않는다.\n\n## 8. Bubbling이 Default value가 된 배경.\n> 현실에서 사고가 발생하면 지역 경찰이 먼저 사고를 조사합니다. 그 지역에 대해 가장 잘 아는 기관은 지역 경찰이기 때문입니다. 추가 조사가 필요하다면 그 이후에 상위 기관이 사건을 넘겨받습니다.\n\n## 9. 이벤트 위임(event delegation)\n> 캡쳐링과 버블링을 이용한 이벤트 핸들링 패턴\n\n### 참고문헌\n* https://ko.javascript.info/bubbling-and-capturing\n* https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/"},{"excerpt":"해시 테이블 1. 개념 해시 - 고기와 감자를 잘게다져 요리한것. 키 값을 잘게 다져 특정 인덱스로 변경\n-> 키와 값을 받아 키를 해싱(잘게 쪼개어)하여 도출된 인덱스에 값을 저장하는 구조 해시테이블이란?  입력받은 값을 특정범위내의 숫자로 변경하는 함수 2. 해시충돌 해시함수를 거친 값이 동일하다면, 데이터가 삽입되는 위치가 중복되는 현상 2-1. 해…","fields":{"slug":"/22_08_28/"},"frontmatter":{"date":"August 28, 2022","title":"✏️ 2022-08-28 Today I Learn","tags":["TIL","HTTP","자료구조","Javascript"]},"rawMarkdownBody":"\n## 해시 테이블\n### 1. 개념\n> 해시 - 고기와 감자를 잘게다져 요리한것. 키 값을 잘게 다져 특정 인덱스로 변경\n> <br/>-> 키와 값을 받아 **키를 해싱(잘게 쪼개어)**하여 도출된 인덱스에 값을 저장하는 구조\n\n* **해시테이블이란?**<br/>  입력받은 값을 특정범위내의 숫자로 변경하는 함수\n\n### 2. 해시충돌\n> 해시함수를 거친 값이 동일하다면, 데이터가 삽입되는 위치가 중복되는 현상\n\n#### 2-1. 해시충돌해결방법 1 : 선형탐사법\n충돌이 발생하면 다음인덱스에 데이터 저장. 충돌이 발생하면 다른곳에 저장.\n\n#### 2-2. 해시충돌해결방법 2 : 제곱탐사법\n충돌이 발생한 지점의 제곱만큼 옆으로 이동하여 데이터 저장 \n\n#### 2-3. 해시충돌해결방법 3 : 이중 해싱 \nA함수를 이용해 충돌이 발생하면 B함수를 통해 해싱하는것\n\n#### 2-4. 해시충돌해결방법 4 : 분리 연결 \n충돌이 발생하면, 연결리스트로직을 이용해 메모리에 저장. 한 메모리 내에 차지하는 데이터가 무한정 늘어날수 있음.\n\n\n### 3.자바스크립트에서 해시테이블을 사용하는 방법\n1. 배열\n2. 객체\n3. **[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) :** 키와 값이 다르게 저장. 키로 여러가지 타입을 저장할 수 있음.\n4. **[Set](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Set) :** 키와 값이 동일하게 저장. 중복된 내용 제거\n"},{"excerpt":"1. Javascript 구조분해할당을 통해 Swap을 구현 할 수 있다. ES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음. 2. Javascript shift() 를 이용한 큐 구현은 효율적이지 못하다. shift를 이용하게 되면, 빈 첫번째 메모리를 메우는 동작을 하기 때문에 n의 속도가 보장된다.\n따라서, 1의 속도를 보장해야하는 큐에서 적…","fields":{"slug":"/22_08_25/"},"frontmatter":{"date":"August 25, 2022","title":"✏️ 2022-08-25 Today I Learn","tags":["TIL","HTTP","Javascript"]},"rawMarkdownBody":"\n### 1. [Javascript] 구조분해할당을 통해 Swap을 구현 할 수 있다.\n\nES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음.\n\n```javascript\nlet [a, b] = 1, 2\n\nconsole.log(a) // 1\nconsole.log(b) // 2\n\n[b, a] = [a, b]\nconsole.log(a) // 2\nconsole.log(b) // 1\n```\n\n### 2. [Javascript] shift() 를 이용한 큐 구현은 효율적이지 못하다.\n\nshift를 이용하게 되면, 빈 첫번째 메모리를 메우는 동작을 하기 때문에 n의 속도가 보장된다.\n따라서, 1의 속도를 보장해야하는 큐에서 적절하지 못하다. 아래와 같이 delete 를 이용하여 사용하면된다.\n\n```javascript\nclass Node {\n  constructor(location, priority) {\n    this.location = location\n    this.priority = priority\n  }\n}\n\nclass Queue {\n  constructor() {\n    this.queue = []\n    this.head = 0\n    this.rear = 0\n  }\n\n  enqueue(location, priority) {\n    // 추가 시 길이를 1늘려준다.\n    this.queue[this.rear++] = new Node(location, priority)\n  }\n\n  dequeue() {\n    // 삭제시 앞에 빈칸을 하나 추가하고, head의 인덱스를 1증가시킨다.\n    const value = this.queue[this.head]\n    delete this.queue[this.head++] // delete를 이용했기 때문에, 1의 속도를 보장한다.\n    return value\n  }\n}\n```\n\n### 3. [HTTP] 상태코드의 종류\n\n**1xx :** 요청이 수신되어 처리중 (거의사용하지않음)\n**2xx :** 정상처리\n**3xx :** **_요청을 완료하기 위해 추가적인 행동이 필요_**\n**4xx :** **_클라이언트 오류_**\n**5xx :** **_서버 오류_**\n\n### 4. [HTTP] 상태코드 추론\n\n클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면 클라이언트는 **상위 상태코드**로 해석해서 처리한다.<br/>\n따라서, 미래에 새로운 상태코드가 추가되어도 클라이언트를 변경하지 않아도 된다.\n\n```\n388 -> 3xx\n499 -> 4xx\n```\n"},{"excerpt":"1. form 을 통한 데이터 전송 시 http contents type aplication/x-www-form-urlencoded : string을 인코딩해서 전달해야 하기 때문에 urlencoded 라는 타입을 명시하여 사용한다. multipart/form-data : 이미지 전송 시, 바이너리 파일로 여러 파트를 끊어서 보내야 할 경우 사용한다. 2…","fields":{"slug":"/22_08_24/"},"frontmatter":{"date":"August 24, 2022","title":"✏️ 2022-08-24 Today I Learn","tags":["TIL","HTTP","자료구조","Javascript"]},"rawMarkdownBody":"\n### 1. form 을 통한 데이터 전송 시 http contents type\n- **aplication/x-www-form-urlencoded** : string을 인코딩해서 전달해야 하기 때문에 urlencoded 라는 타입을 명시하여 사용한다.\n- **multipart/form-data** : 이미지 전송 시, 바이너리 파일로 여러 파트를 끊어서 보내야 할 경우 사용한다.\n\n### 2. HTML form으로 GET요청도 가능하다.\n\n### 3. PUT은 일부 업데이트가 아니다.\n기존의 리소스를 삭제하고 다른 리소스로 갈아치우는 것이기 때문에, 주의하여 사용해야한다.\n\n### 4. PATCH는 리소스의 일부 업데이트를 의미한다.\n\n### 5. HTTP 메소드의 속성\n- **안전** : 호출해도 리소스를 변경하지 않는다.\n    - GET, HEAD, OPTION, TRACE\n- **멱등** : 여러번 호출해도 같은 결과를 보여준다.\n    - GET, PUT, DELETE \n- **캐시** : 응답결과의 리소스를 반복하여 사용가능하다.\n    - GET, HEAD\n    - POST, PUT : 캐시키를 이용해 body값까지 모두 캐싱해야하기 때문에 번거로워서 잘 쓰이지 않는다.\n\n### 6. 메서드 설계 시 리소스에 해당되는 것은 '명사'이다.\nex) 미네랄을 캔다 에서 캔다가 중요요소가 아니라 미네랄을 기준으로 메서드를 설계해야한다.\nGET /minerals -> O\nGET /dig -> X \n\n### 7. GET은 스펙상으로 body를 붙힐 수 있다.\n구현이 되지 않은 서버가 많은 것일 뿐.\n\n### 8. HEAD는 body를 붙힐 수 없는 GET이라고 보면된다.\n\n### 9. POST는 리소스 상태의 변경을 위한 용도로도 사용된다.\n```\nPOST /car/{id}/start\nPOST /car/{id}/stop\n```\n이때는 메서드에 동사를 사용한다.\n\n### 10. POST와 PUT의 차이는 리소스의 정보를 어디서 알고있느냐의 차이다.\n- POST : 리소스의 생성을 요청하면, 서버에서 생성정보를 보내줌\n- PUT : 클라이언트에서 업데이트 할 리소스를 정해서 보내줌. 이 때, 클라이언트 내에 스토어로 리소스를 따로 관리해줘야하는 전제조건이 있다.\n\n### 11. 배열은 연속되는 순서로 메모리를 차지한다. 인덱스 값은 연속되지만, 주소값은 반드시 연속되어 증가하지 않는다.\n\n### 12. 자바스크립트 배열은 해시맵과 같아서, 논리값 할당이 가능하다. 단, 배열의 실제길이에 영향을 주지는 않는다.(사용권장X)\n\n### 13. 연결리스트는 메모리를 순서대로 차지하지 않는다. "}]}},"pageContext":{}},"staticQueryHashes":[]}