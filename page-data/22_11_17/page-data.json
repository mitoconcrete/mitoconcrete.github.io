{"componentChunkName":"component---src-templates-post-jsx","path":"/22_11_17/","result":{"data":{"site":{"siteMetadata":{"title":"mitoconcrete"}},"markdownRemark":{"id":"a2f18918-5486-599c-a969-ebe995817f9f","excerpt":"객체지향 객체란? 실제로 존재하는 유형의 물체 혹은 무형의 개념/이론을 통칭하는 말이다. 객체지향 소프트웨어란? 변화가능 한 것. 하지만, 시간이 지남에 따라 변화에 대한 비용이 줄어들어야 하는 것. 시간이 지남에 따라 변화에 대한 비용이 늘어난다면, 잘못된 소프트웨어일 확률이 높다. 객체지향은 변화에 대한 비용을 감소시키기 위한 디자인패턴 중 하나이다.…","html":"<h2>[객체지향] 객체란?</h2>\n<p>실제로 존재하는 유형의 물체 혹은 무형의 개념/이론을 통칭하는 말이다.</p>\n<h2>[객체지향] 소프트웨어란?</h2>\n<p>변화가능 한 것. 하지만, 시간이 지남에 따라 변화에 대한 비용이 줄어들어야 하는 것.<br>\n시간이 지남에 따라 변화에 대한 비용이 늘어난다면, 잘못된 소프트웨어일 확률이 높다.<br>\n객체지향은 변화에 대한 비용을 감소시키기 위한 디자인패턴 중 하나이다.</p>\n<h2>[Java] 생성자?</h2>\n<p>생성자는 <code class=\"language-text\">new</code>키워드를 이용해 인스턴스를 초기화 메서드이다. 생성자로 정의된 매개변수를 통해 이 객체가 생성된 의도를 파악 할 수 있음.</p>\n<h2>[Java] 클래스? 인스턴스? 객체?</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">클래스</th>\n<th align=\"left\">인스턴스</th>\n<th align=\"left\">객체</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">인스턴스를 정의한 명세이다.</td>\n<td align=\"left\">클래스를 new 키워드를 이용하여 실체화 시킨 객체이다.</td>\n<td align=\"left\">인스턴스를 총칭하는 포괄적 개념이다.</td>\n</tr>\n<tr>\n<td align=\"left\">붕어빵 틀로 많이 부르곤 한다.</td>\n<td align=\"left\">실체화 하는 과정을 '인스턴스화' 한다고 칭하며, 인스턴스는 JVM의 힙에 저장되어 사용된다.</td>\n<td align=\"left\">객체 > 인스턴스</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<h2>[Java] void</h2>\n<p>반환 타입으로 void를 명시해주면, 자바컴파일러는 암묵적으로 void함수에 <code class=\"language-text\">return ;</code>을 넣어준다.</p>\n<h2>[Java] Primitive Type vs Wrapper Class</h2>\n<p>ex)</p>\n<ul>\n<li>int vs Interger</li>\n<li>boolean vs Boolean</li>\n<li>long vs Long</li>\n<li>...</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Primitive Type</th>\n<th align=\"left\">Wrapper Class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">메모리에 곧바로 값이 저장된다.</td>\n<td align=\"left\">원시타입을 객체로 구현한 것으로서 저장 시, 객체의 참조위치가 저장된다.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>Boxing :</strong> Primitive Type -> Wrapper Class</li>\n<li><strong>Unboxing :</strong> Wrapper Class -> Primitive Class</li>\n<li>JDK 1.5부터는 auto boxing/unboxing 을 지원하게 되어 명시적으로 형변환을 해줄 필요가 없어짐.</li>\n</ul>\n<h2>[Java] 매개변수(parameter) vs 인자(argument)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 매개변수</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token comment\">// &lt;= 이렇게 받아올 변수들을 정의하는 것을 매개변수</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 인자</span>\n<span class=\"token class-name\">Phone</span> phone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"갤럭시\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;= 이렇게 전달하는 것을 인자</span></code></pre></div>\n<h2>[Java] 원시형 매개변수 vs 참조형 매개변수</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">원시형 매개변수</th>\n<th align=\"left\">참조형 매개변수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Read 가능</td>\n<td align=\"left\">Create, Read, Update, Delete 가능</td>\n</tr>\n<tr>\n<td align=\"left\">인자로 전달한 것과 별개로 동작한다.</td>\n<td align=\"left\">인자로 전달한 것의 주소를 참조하여, 전달받은 인자에 영향을 준다.</td>\n</tr>\n</tbody>\n</table>\n<h2>[Java] 객체 변수 종류</h2>\n<p>객체의 변수에는 멤버변수와 지역변수가 있다.<br>\n그 중에서도 멤버변수는 클래스변수와 인스턴스변수로 분리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 멤버변수 시작</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> phoneNumber<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//1. 클래스 변수</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">//2. 인스턴스 변수</span>\n    <span class=\"token comment\">// 멤버변수 끝</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> phoneDetailName<span class=\"token punctuation\">;</span> <span class=\"token comment\">//3. 지역변수</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>1. 클래스 변수</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- `static`키워드로 선언 된 변수로서, 클래스 메모리에 올라가게 된다.\n- 메모리 저장 시점은 단 1회로서, 컴파일러는 클래스 변수를 가장먼저읽어, 클래스 메모리로 이동시킨다.\n- 이 때 클래스 변수는 생성자를 이용한 선언없이 사용이 가능하다.\n\n```java\nPhone.phoneNumber\n```</code></pre></div>\n<h3>2. 인스턴스 변수</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- new 키워드를 통해 **인스턴스가 생성된 시점**에 힙메모리에 올라간다.\n- 이곳에 주소값을 두고, 콜스택에 이 주소값을 쌓아서 사용한다.</code></pre></div>\n<h3>3. 지역 변수</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 메소드 내에서만 사용 할 수 있는 변수이다.\n- 각 메소드의 런타임 즉, 스택에서 invoke가 시작 될 때 유효해진다.</code></pre></div>\n<h2>[Java] 객체 메소드 종류</h2>\n<p>객체의 메소드는 클래스 메소드와 인스턴스 메소드가 있다.</p>\n<h3>1. 클래스 메소드</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">static 키워드로 선언된 메소드로서, 인스턴스 변수나 인스턴스 메소드를 사용하지 않는 것을 클래스 메소드라고 한다.\n따라서, 클래스 메소드안에서 인스턴스 변수를 사용할 수 없다. 왜냐하면, 클래스 메소드가 사용가능한 시점은 인스턴스가 생성되지 않은 시점이기 때문이다.</code></pre></div>\n<h3>2. 인스턴스 메소드</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">인스턴스 변수를 필요로 하는 메소드. 인스턴스 생성 된 후이기 때문에 인스턴스 변수와 클래스 변수를 모두 사용 할 수 있다.</code></pre></div>\n<h2>[Java] 인터페이스 vs 추상클래스</h2>\n<ul>\n<li>추상 클래스는 부모의 기능을 확장할 때 사용한다. 주로, 상속관계가 확정적일 때 주로 사용. 수직적 확장. (템플릿 메소드 패턴 검색)</li>\n<li>인터페이스는 객체들에 대한 동일한 동작을 보장하기 위해 사용한다.</li>\n</ul>\n<h2>[Java] 객체지향의 3가지 특성과 구현예시</h2>\n<h3>1. 캡슐화</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 객체가 어떻게 동작하는지 외부에 노출을 막는다.\n- 객체내부의 기능이 변경되도, 외부에는 큰 영향을 끼치지않는다.\n- 접근제어자를 통해 구현한다.</code></pre></div>\n<h3>2. 추상화</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 어떤 사물의 특성에서 공통적인 특성/성질을 뽑아 의미있는 표현으로 정의한다.\n- 예를 들어, 카카오톡, 메시지, 메일에는 '전송'이라는 동일동작이 있다. 하지만, 각기 전송을 하기 위한 조건이 다르다. 따라서, 추상적 명세로 '전송'이라는 동작을 인터페이스에 정의해놓고, 그것을 클래스에서 실행하되 오버라이딩을 통해 자신의 특성에 맞게 정의하여 실행 시킬 수 있다.\n- 어떤 특정한 변경없이, '전송'이라는 하나의 동작 키워드로 카카오톡, 메시지, 메일모두에게 명령을 내릴 수 있도록 한다. 즉, kakaoSend/MessageSend/EmailSend 에 대한 메소드구현없이 Send라는 메소드를 갖고와서 자신의 특성에 맞게 사용할 수 있는 것 이다.\n- 인터페이스/추상클래스를 통해 구현한다.</code></pre></div>\n<h3>3. 다형성</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 특별한 비용없이, 다양한 타입을 갖는것이 가능해지는 특성이다.\n- 업캐스팅과 오버라이딩을 통해 구현이 가능하다.\n- 업캐스팅이란 부모 클래스로 형변환을 하여 자식클래스를 선언하는 것.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Plug</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Plug on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InternetOfThings</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPlug</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Plug</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InternetOfThings</span> <span class=\"token punctuation\">{</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n     <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n     <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Smart</span>냉장고 <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Plug</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InternetOfThings</span> <span class=\"token punctuation\">{</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n     <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n     <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">SmartPlug</span> smartPlug <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmartPlug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsmartPlug<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsmartPlug<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Plug</span> plug <span class=\"token operator\">=</span> smartPlug<span class=\"token punctuation\">;</span>\nplug<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplug<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">InternetOfThings</span> iot <span class=\"token operator\">=</span> smartPlug<span class=\"token punctuation\">;</span>\niot <span class=\"token operator\">=</span> smart냉장고<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//........</span>\n<span class=\"token comment\">// ......</span>\n<span class=\"token comment\">// ...</span>\niot <span class=\"token operator\">=</span> smartPlug<span class=\"token punctuation\">;</span>\niot <span class=\"token operator\">=</span> smart냉장고<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 비즈니스 로직</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\niot<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 냉장고</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>위 코드에서 iot는 스마트냉장고, 스마트플러그등 다향한 상태를 받아올 수 있다.\n한개의 변수가 다양한 변수타입을 가질 수 있는 것을 다형성이라고하고, 이는 상속,실행을 업캐스팅함으로서 구현 할 수 있다.</p>\n<h2>[Java] 초기화 블럭</h2>\n<h3>1. 클래스 초기화 블럭</h3>\n<p><code class=\"language-text\">static</code> 키워드로 정의하는 초기화 블럭으로서, 클래스가 생성되는 시점을 볼 수 있다. 클래스 변수를 초기화 할 때 사용한다.</p>\n<h3>2. 인스턴스 초기화 블럭</h3>\n<p>인스턴스가 생성되기 직전에 사용되는 초기화 블럭으로서, 클래스 변수와 인스턴스 변수 모두에 접근가능하다.</p>\n<h2>[Java] 멤버변수의 초기화 시기와 순서</h2>\n<p>(클래스 별로 1회만 실행됨) 클래스 로딩 -> 기본값 -> 명시적 초기화 -> 클래스 초기화 블럭 -> (인스턴스 생성마다 반복됨) 인스턴스 생성 -> 기본값 -> 명시적 초기화 -> 인스턴스 초기화 블럭 -> 생성자</p>\n<p>아래는 2개의 인스턴스를 생성하고, 어떤 순서로 시행되는 지 로그를 찍어본 것이다.\n클래스 초기화는 단 1회만 시행되고, 인스턴스 생성마다 초기화가 진행되는 모습을 확인 할 수 있었다.</p>\n<p><img src=\"/image/221117_01.png\" alt=\"멤버변수 초기화\"></p>\n<h2>[회고] 221117</h2>\n<p>오늘부터 자바의 꽃인 객체지향을 학습하게 된다. 일단, 실제 사례를 통해 어떤식으로 객체지향개념이 적용되는지 명확히 볼 수 있었다. 몇년간 암기식으로만 외우던 것을 실제 사례를 보면서하니, 확 와닿았고, 너무 재미있었다.</p>\n<p>오늘은 몸이 좋지 않았다. 코감기가 심하게 오는지 어지럽고 피곤한 상태가 지속되었다. 계속 꾸벅꾸벅졸다가 이건 아닌 것 같아서 병원에 다녀왔는데 몸이 금방나아져서 공부에 집중 할 수 있었다. 갈까 말까 고민했는데, 결론적으로 이런 상황에서 팀의 분위기를 저해하지 않기 위해서는 내 몸상태에 대해서 빠르게 파악하고 대처하는 것도 능력이겠다 생각했다. 내가 조는걸 보고 다른 팀원 분들도 괜시리 집중을 못하는 것 같아 죄송했다. 다녀와서 공부가 잘되니, 팀원들이랑 소통도하고, 질문도 주고받았다. 내가 활발해지니, 팀의 분위기가 조금은 올라가는 것처럼 느껴져 기분이 좋았다. 모난 행동을 하는 것은 아주 사소한 것도 팀이 나가는 방향에 방해가 될 수 있다는 자각을 항상 해야겠다.</p>\n<p>오늘 하루종일 자바의 정석을 보면서, 자바학습을 했다. <strong>객체지향프로그래밍I</strong> 을 보며 공부했는데, 내가 자바스크립트 공부할 때 어렵다고 간과했던 메모리 동작부가 나왔다. 과거에 이걸 간과하고 개발한 것이 너무 마음에 걸려서, 새로운 언어를 배움에 따라 엔진동작부터 천천히 시작하고자 했다. 생각보다 어렵게 다가오지 않았다. 또한 각 영역에 대한 이해를 하고나니, 지루하게 읽히던 책이 재미있게 다가왔다.</p>\n<p>다만, 확실하게 이해했다고 생각했지만, 동작순서에 대한 질문이 들어왔을땐 등땀이 주르륵 흐르면서 입밖으로 내뱉질 못했다. 이것또한 모르는것이기 때문에, 자신감있게 입밖으로 개념을 뱉을 수 있도록 곱씹어야겠다는 다짐을 했다.</p>","frontmatter":{"title":"✏️ 2022-11-17 Today I Learn","date":"November 17, 2022","update":"November 17, 2022","tags":["Java","객체지향","TIL","내일배움캠프","스파르타코딩캠프"],"series":"내일배움캠프"},"fields":{"slug":"/22_11_17/","readingTime":{"minutes":13.755}}},"seriesList":{"edges":[{"node":{"id":"bff90a25-d0a7-5c7f-a6fb-bf15787a70dc","fields":{"slug":"/22_10_31/"},"frontmatter":{"title":"✏️ 2022-10-31 Today I Learn"}}},{"node":{"id":"68eb6c50-88e2-5afe-9bc0-7e1673e0ea6d","fields":{"slug":"/22_11_01/"},"frontmatter":{"title":"✏️ 2022-11-01 Today I Learn"}}},{"node":{"id":"6b664f20-f21b-5678-84b3-3959827dc922","fields":{"slug":"/22_11_02/"},"frontmatter":{"title":"✏️ 2022-11-02 Today I Learn"}}},{"node":{"id":"2af6e2bd-2fff-52cb-80cc-ffab51e8f899","fields":{"slug":"/22_11_03/"},"frontmatter":{"title":"✏️ 2022-11-03 Today I Learn"}}},{"node":{"id":"2beec6d7-e058-5f0d-ae30-d2012c7d16ea","fields":{"slug":"/22_11_04/"},"frontmatter":{"title":"✏️ 2022-11-04 Today I Learn"}}},{"node":{"id":"9fa2d0ab-5bb6-5e0e-8499-e69a7839c45f","fields":{"slug":"/22_11_1st/"},"frontmatter":{"title":"✏️ 2022-11-1st Weekly I Learn"}}},{"node":{"id":"f527c43e-29f4-5073-8ad4-ab7da0f3977f","fields":{"slug":"/22_11_07/"},"frontmatter":{"title":"✏️ 2022-11-07 Today I Learn"}}},{"node":{"id":"2cbe19b7-ed66-54b7-9a88-0fcc3cf6c153","fields":{"slug":"/22_11_08/"},"frontmatter":{"title":"✏️ 2022-11-08 Today I Learn"}}},{"node":{"id":"78126d6d-cf07-5526-a5e3-87239126f815","fields":{"slug":"/22_11_09/"},"frontmatter":{"title":"✏️ 2022-11-09 Today I Learn"}}},{"node":{"id":"692e8305-8db0-5580-a7f8-e43fefc02bd3","fields":{"slug":"/22_11_10/"},"frontmatter":{"title":"✏️ 2022-11-10 Today I Learn"}}},{"node":{"id":"514df56a-8dfc-5f59-8656-3c77a1e4327d","fields":{"slug":"/22_11_11/"},"frontmatter":{"title":"✏️ 2022-11-11 Today I Learn"}}},{"node":{"id":"dde9725a-6731-564e-8374-01317f8fb11f","fields":{"slug":"/22_11_2nd/"},"frontmatter":{"title":"✏️ 2022-11-2nd Weekly I Learn"}}},{"node":{"id":"97db2986-14ad-59dd-b32c-6b448d5a733e","fields":{"slug":"/22_11_14/"},"frontmatter":{"title":"✏️ 2022-11-14 Today I Learn"}}},{"node":{"id":"df8dd86e-3071-59c1-a092-288a3c90807e","fields":{"slug":"/22_11_15/"},"frontmatter":{"title":"✏️ 2022-11-15 Today I Learn"}}},{"node":{"id":"b02be35b-96ec-51b5-9ae2-23820778b8d8","fields":{"slug":"/22_11_16/"},"frontmatter":{"title":"✏️ 2022-11-16 Today I Learn"}}},{"node":{"id":"a2f18918-5486-599c-a969-ebe995817f9f","fields":{"slug":"/22_11_17/"},"frontmatter":{"title":"✏️ 2022-11-17 Today I Learn"}}},{"node":{"id":"c7d1adcc-ea6d-5273-ace8-c3d1819c89a9","fields":{"slug":"/22_11_18/"},"frontmatter":{"title":"✏️ 2022-11-18 Today I Learn"}}},{"node":{"id":"3222dd56-1dea-5052-81d7-7898798e0238","fields":{"slug":"/22_11_3rd/"},"frontmatter":{"title":"✏️ 2022-11-3rd Weekly I Learn"}}},{"node":{"id":"7617e852-4a75-5a03-8baf-fb255eb554f9","fields":{"slug":"/22_11_21/"},"frontmatter":{"title":"✏️ 2022-11-21 Today I Learn"}}},{"node":{"id":"9f104791-a2d7-50b6-80b5-e78bd5ec7678","fields":{"slug":"/22_11_22/"},"frontmatter":{"title":"✏️ 2022-11-22 Today I Learn"}}},{"node":{"id":"6205256b-a876-5a1e-94bf-9dc15065a965","fields":{"slug":"/22_11_23/"},"frontmatter":{"title":"✏️ 2022-11-23 Today I Learn"}}},{"node":{"id":"4db78a29-3441-5206-8002-6e7321bb7c99","fields":{"slug":"/22_11_24/"},"frontmatter":{"title":"✏️ 2022-11-24 Today I Learn"}}},{"node":{"id":"4adfbcd8-9d66-5c5d-ab31-71005a65cd14","fields":{"slug":"/22_11_25/"},"frontmatter":{"title":"✏️ 2022-11-25 Today I Learn"}}},{"node":{"id":"65a2f128-15ee-5853-a4c3-115eb93af8f2","fields":{"slug":"/22_11_4th/"},"frontmatter":{"title":"✏️ 2022-11-4th Weekly I Learn"}}},{"node":{"id":"6474759c-b861-5e6d-bcd3-1dc4d4fb6050","fields":{"slug":"/22_11_28/"},"frontmatter":{"title":"✏️ 2022-11-28 Today I Learn"}}},{"node":{"id":"a9471a01-6814-534f-8f42-7bb167e939f9","fields":{"slug":"/22_11_29/"},"frontmatter":{"title":"✏️ 2022-11-29 Today I Learn"}}},{"node":{"id":"55a96c56-95ce-5ddd-902f-74879ef03e7d","fields":{"slug":"/22_11_30/"},"frontmatter":{"title":"✏️ 2022-11-30 Today I Learn"}}},{"node":{"id":"e421a9be-d87d-507b-b2ec-653f9b0ab722","fields":{"slug":"/22_12_01/"},"frontmatter":{"title":"✏️ 2022-12-01 Today I Learn"}}},{"node":{"id":"004d92cd-c4ab-57f0-a1f2-29ddf364e409","fields":{"slug":"/22_12_02/"},"frontmatter":{"title":"✏️ 2022-12-02 Today I Learn"}}},{"node":{"id":"bcf2f7af-4ba3-59b7-83dd-d5376cf5aa36","fields":{"slug":"/22_12_1st/"},"frontmatter":{"title":"✏️ 2022-12-1th Weekly I Learn"}}},{"node":{"id":"d247bb1b-dcca-5f7a-951c-6c2a803db140","fields":{"slug":"/22_12_05/"},"frontmatter":{"title":"✏️ 2022-12-05 Today I Learn"}}},{"node":{"id":"776f9c88-4455-53f4-ae90-e7754918558a","fields":{"slug":"/22_12_06/"},"frontmatter":{"title":"✏️ 2022-12-06 Today I Learn"}}},{"node":{"id":"c6b17078-0525-5ec8-80ee-0b9fa2e0227d","fields":{"slug":"/22_12_07/"},"frontmatter":{"title":"✏️ 2022-12-07 Today I Learn"}}},{"node":{"id":"e7f37c40-c448-573d-80ee-a87e7f25485d","fields":{"slug":"/22_12_08/"},"frontmatter":{"title":"✏️ 2022-12-08 Today I Learn"}}},{"node":{"id":"29d073f0-0b07-5b80-9e0f-d5bfb9de98b5","fields":{"slug":"/22_12_09/"},"frontmatter":{"title":"✏️ 2022-12-09 Today I Learn"}}},{"node":{"id":"a8d8ef79-c35e-5a8b-a1c9-accfa950cbc9","fields":{"slug":"/22_12_2nd/"},"frontmatter":{"title":"✏️ 2022-12-2nd Weekly I Learn"}}},{"node":{"id":"4252e767-57a3-5105-a02f-7cfc836d0e6a","fields":{"slug":"/22_12_12/"},"frontmatter":{"title":"✏️ 2022-12-12 Today I Learn"}}},{"node":{"id":"aa13b33f-cfd2-5c84-9933-faa53b0c707b","fields":{"slug":"/22_12_13/"},"frontmatter":{"title":"✏️ 2022-12-13 Today I Learn"}}},{"node":{"id":"7d26c70f-0213-5152-91d8-c6e17ed0c77c","fields":{"slug":"/22_12_14/"},"frontmatter":{"title":"✏️ 2022-12-14 Today I Learn"}}},{"node":{"id":"0a14e2fa-df2b-5d4e-b49f-bc200ddf34e8","fields":{"slug":"/22_12_15/"},"frontmatter":{"title":"✏️ 2022-12-15 Today I Learn"}}},{"node":{"id":"497abc88-2ebb-5f02-8a15-7f8ec4bb19c3","fields":{"slug":"/22_12_16/"},"frontmatter":{"title":"✏️ 2022-12-16 Today I Learn"}}},{"node":{"id":"c3e1b3d6-bab1-5ccc-9cb9-e97c50ce04d8","fields":{"slug":"/22_12_3rd/"},"frontmatter":{"title":"✏️ 2022-12-3rd Weekly I Learn"}}},{"node":{"id":"8a7fcec3-5344-5298-8f9b-5d6f3fc601d0","fields":{"slug":"/22_12_19/"},"frontmatter":{"title":"✏️ 2022-12-19 Today I Learn"}}},{"node":{"id":"00e08244-1e45-57e7-8914-79729e10c2c2","fields":{"slug":"/22_12_20/"},"frontmatter":{"title":"✏️ 2022-12-19 Today I Learn"}}}]},"previous":{"fields":{"slug":"/22_11_16/"},"frontmatter":{"title":"✏️ 2022-11-16 Today I Learn"}},"next":{"fields":{"slug":"/22_11_18/"},"frontmatter":{"title":"✏️ 2022-11-18 Today I Learn"}}},"pageContext":{"id":"a2f18918-5486-599c-a969-ebe995817f9f","series":"내일배움캠프","previousPostId":"b02be35b-96ec-51b5-9ae2-23820778b8d8","nextPostId":"c7d1adcc-ea6d-5273-ace8-c3d1819c89a9"}},"staticQueryHashes":[]}