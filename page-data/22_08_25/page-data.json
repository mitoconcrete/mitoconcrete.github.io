{"componentChunkName":"component---src-templates-post-jsx","path":"/22_08_25/","result":{"data":{"site":{"siteMetadata":{"title":"mitoconcrete"}},"markdownRemark":{"id":"543e504a-123e-563c-9653-3b763b58cf23","excerpt":"1. Javascript 구조분해할당을 통해 Swap을 구현 할 수 있다. ES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음. 2. Javascript shift() 를 이용한 큐 구현은 효율적이지 못하다. shift를 이용하게 되면, 빈 첫번째 메모리를 메우는 동작을 하기 때문에 n의 속도가 보장된다.\n따라서, 1의 속도를 보장해야하는 큐에서 적…","html":"<h3>1. [Javascript] 구조분해할당을 통해 Swap을 구현 할 수 있다.</h3>\n<p>ES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h3>2. [Javascript] shift() 를 이용한 큐 구현은 효율적이지 못하다.</h3>\n<p>shift를 이용하게 되면, 빈 첫번째 메모리를 메우는 동작을 하기 때문에 n의 속도가 보장된다.\n따라서, 1의 속도를 보장해야하는 큐에서 적절하지 못하다. 아래와 같이 delete 를 이용하여 사용하면된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">location<span class=\"token punctuation\">,</span> priority</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> location<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">location<span class=\"token punctuation\">,</span> priority</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 추가 시 길이를 1늘려준다.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rear<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 삭제시 앞에 빈칸을 하나 추가하고, head의 인덱스를 1증가시킨다.</span>\n        <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// delete를 이용했기 때문에, 1의 속도를 보장한다.</span>\n        <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. [HTTP] 상태코드의 종류</h3>\n<p><strong>1xx :</strong> 요청이 수신되어 처리중 (거의사용하지않음)\n<strong>2xx :</strong> 정상처리\n<strong>3xx :</strong> <strong><em>요청을 완료하기 위해 추가적인 행동이 필요</em></strong>\n<strong>4xx :</strong> <strong><em>클라이언트 오류</em></strong>\n<strong>5xx :</strong> <strong><em>서버 오류</em></strong></p>\n<h3>4. [HTTP] 상태코드 추론</h3>\n<p>클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면 클라이언트는 <strong>상위 상태코드</strong>로 해석해서 처리한다.<br/>\n따라서, 미래에 새로운 상태코드가 추가되어도 클라이언트를 변경하지 않아도 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">388 -> 3xx\n499 -> 4xx </code></pre></div>","frontmatter":{"title":"✏️ 2022-08-25 Today I Learn","date":"August 25, 2022","update":"August 25, 2022","tags":["TIL","HTTP","Javascript"],"series":"TIL"},"fields":{"slug":"/22_08_25/","readingTime":{"minutes":2.2}}},"seriesList":{"edges":[{"node":{"id":"9ddbd6bf-8b29-58f8-8032-04182e729003","fields":{"slug":"/22_08_24/"},"frontmatter":{"title":"✏️ 2022-08-24 Today I Learn"}}},{"node":{"id":"543e504a-123e-563c-9653-3b763b58cf23","fields":{"slug":"/22_08_25/"},"frontmatter":{"title":"✏️ 2022-08-25 Today I Learn"}}},{"node":{"id":"46966b7a-ca89-51c8-9f6d-54e00e7c6439","fields":{"slug":"/22_08_28/"},"frontmatter":{"title":"✏️ 2022-08-28 Today I Learn"}}},{"node":{"id":"efc09a83-4f4b-5e6a-ab5a-faf6c6dc1354","fields":{"slug":"/22_08_29/"},"frontmatter":{"title":"✏️ 2022-08-29 Today I Learn"}}}]},"previous":{"fields":{"slug":"/22_08_24/"},"frontmatter":{"title":"✏️ 2022-08-24 Today I Learn"}},"next":{"fields":{"slug":"/22_08_28/"},"frontmatter":{"title":"✏️ 2022-08-28 Today I Learn"}}},"pageContext":{"id":"543e504a-123e-563c-9653-3b763b58cf23","series":"TIL","previousPostId":"9ddbd6bf-8b29-58f8-8032-04182e729003","nextPostId":"46966b7a-ca89-51c8-9f6d-54e00e7c6439"}},"staticQueryHashes":[]}