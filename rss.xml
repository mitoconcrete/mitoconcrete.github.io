<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[RSS Feed of mitoconcrete]]></title><description><![CDATA[어제보다 조금 더 성장하기 위해 기록합니다.]]></description><link>https://mitoconcrete.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 02 Nov 2022 14:53:06 GMT</lastBuildDate><item><title><![CDATA[✏️ 2022-11-02 Today I Learn]]></title><description><![CDATA[1. JSON과 XML XML(eXtensible Markup Language) 마크업 언어로서, 데이터를 정의할 때 쓰인다. 해당 문서의 요소는 데이터로서, 유저는 작성된 데이터를 저장하여 다른곳에 전송한다. HTML…]]></description><link>https://mitoconcrete.github.io/22_11_02/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_11_02/</guid><pubDate>Wed, 02 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. JSON과 XML&lt;/h2&gt;
&lt;h3&gt;XML(eXtensible Markup Language)&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;xml&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;1.0&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;toy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;robot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;toy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;fruit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;apple&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;fruit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;xml&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;마크업 언어로서, 데이터를 정의할 때 쓰인다.&lt;/li&gt;
&lt;li&gt;해당 문서의 요소는 데이터로서, 유저는 작성된 데이터를 저장하여 다른곳에 전송한다.&lt;/li&gt;
&lt;li&gt;HTML과 유사한 방식으로 데이터에 해당되는 태그를 열고 닫음으로서, 데이터를 정의한다.&lt;/li&gt;
&lt;li&gt;XML에는 데이터설명,버전을 적을 수 있어, 이를 이용해 데이터의 무결성을 보장한다.&lt;/li&gt;
&lt;li&gt;따라서, 은행,정부문서와 같은 데이터의 무결성이 중요한 곳에서 XML을 주로 사용한다.&lt;/li&gt;
&lt;li&gt;문서를 파싱하여, 가공가능 한 데이터로 만드는 것에 시간이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JSON(JavaScript Object Notion)&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string-property property&quot;&gt;&quot;toy&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;robot&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string-property property&quot;&gt;&quot;fruit&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;apple&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;key : value 쌍으로 이루어진, 데이터 형태&lt;/li&gt;
&lt;li&gt;JSON은 자바스크립트 함수인 eval()로 파싱되어 해석된다.&lt;/li&gt;
&lt;li&gt;문자열을 전송받은 후 곧바로 문자열을 파싱하므로 XML에 비하여 가공속도가 빠르다.&lt;/li&gt;
&lt;li&gt;따라서, 빨리 읽고 쓸 수 있다는 장점이 있다.&lt;/li&gt;
&lt;li&gt;하지만, 데이터의 버전이나, 설명같은 부가설명을 할 수 없기 때문에 무결성을 보장 할 수 없다.&lt;/li&gt;
&lt;li&gt;따라서, 무결성 보장을 위한 검증을 추가적으로 신경써줘야한다.&lt;/li&gt;
&lt;li&gt;JSON은 XML과 다르게, 배열사용이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. [회고] 221102 회고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;팀 프로젝트 진행&lt;/li&gt;
&lt;li&gt;팀원들 문제 해결1 : git flow&lt;/li&gt;
&lt;li&gt;팀원들 문제 해결2 : 업무 할당&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt;&lt;br&gt;
개인 게시판 마크업이 끝나고, 팀원들의 모든 HTML파일을 모았다. 팀원명을 클릭했을 때, 클릭한 팀원의 페이지로 이동하는 로직을 작성해야했다.
팀원들이 5명인데, 기존에는 팀원들 5명에대한 html을 rendering하는 함수를 일일히 작성해야하는지 고민했다.&lt;/p&gt;
&lt;p&gt;같은 기능이 반복될 것 같아서, 지속적으로 고민하다 갑자기 문득떠오른게 parameter를 이용해 동적으로 html파일을 rendering하는 방법이었다!
혹시 되나 싶어 적용해보니, 동작하길래 곧바로 아래의 api를 작성하여 적용하였다. 이제 우리 팀페이지는 하나의 함수에서 동적으로 선택되어 보여질 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/members&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; methods&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    parameter_dict &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to_dict&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; parameter_dict&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; render_template&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;members/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.html&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt;&lt;br&gt;
나의 욕심으로 이번 프로젝트에서 팀원들이 git을 사용하도록 제안하였다. 아침에 &lt;em&gt;진실의 방&lt;/em&gt;에서 git을 사용하는 모습을 간단히 시연해드렸는데, 처음에 3분만 계셨는데 시연이 모두 끝나고 돌아보니깐 팀원들이 모두 시연을 보러와주셔서 좋았다.(옹기종기 모여있는 모습이 귀여웠다)
public repo에 권한이 준다면, PR을 하지않고 push/pull 다 할 수 있을 줄 알았는데, 내 착각이었다. 역시나 권한문제가 발생하였고, 내 repo를 fork해서 PR을 날려야 하는 상황이 되었다.&lt;/p&gt;
&lt;p&gt;죄송하다고 말씀드리고 모든 팀원들의 repo를 연결해드리는 것을 도와드렸다. 원래는 직접적인 커멘드를 말씀드리지 않았는데, clone한 repo의 기존주소를 fork한 repo의 주소로 변경하는 것을 직접 커멘드를 입력하면서 해결해드렸다. 몇 분들은 아직 아리까리하시다고 피드백 주셨지만, 금새 적응하여 코드를 업데이트 하시고, PR을 날려 master repo에 코드를 적용하셨다. 또한, 재미있어하는 모습을 보여주셔서 내가 다 뿌듯했다.&lt;/p&gt;
&lt;p&gt;git문제를 해결해드리면서, 가장 신경을 썻던 것은 &apos;내가 문제를 직접적으로 해결해드리지 않는것&apos;과 &apos;정답을 말하지 않는 것&apos;이었다. 가이드가 끝나고 난 뒤, 혹시 의사를 결정하는데 있어서 내 의견이 많이 방해가 되었는지, 문제를 해결하고 난 뒤 온전히 본인 것이라는 기분이 들지 않는지, 흐름은 이해되셨는지 체크했다. 다행이도, 긍정적인 반응들을 보내주셔서 감사했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/221102_01.jpg&quot; alt=&quot;팀원들이 커밋을 보낸순간&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt;&lt;br&gt;
팀원들이 모두 집중 할 수 있는 프로젝트가 되었으면 해서 끊임없이 어떻게 업무를 분배하면 좋을지 고민했다. 메인페이지 + 개인페이지의 구성으로 이루어진 프로젝트 특성상 개인페이지의 작업을 모두 마친 현상태에서, 메인페이지로 오버헤드가 몰릴 것이 당연한 상황이었다.
따라서, 메인페이지에 업무가 모이지 않도록 다른 곳으로 업무를 분산시키는 것이 좋겠다는 생각을 했고, 모든 페이지를 모아서 작업을 할 때, 필요한 작업들을 추려서 팀원숫자만큼 나누어보았다.&lt;br&gt;
어쩌다보니, 프로젝트 리드(?) 같은 역할을 수행하게 되었는데 팀장과 역할이 겹치는 부분이 많아서 불편해 하실 수 있겠다는 생각이 들어 내가 하는 고민들을 공유하는게 낫겠다는 판단이 들어 팀장님께 내가하고 있는 고민들을 공유드리기 위해 미팅을 요청드렸다.&lt;br&gt;
오히려 내 고민을 이해해주시고, 오히려 생각못한 상황들을 대신 생각해줘서 고마웠다 라는 말씀을 해주셔서 너무 감사했다. 모두가 끊임없이 작업 할 수 있는 환경을 위해 남은 팀원들에게 git branch 를 생성하는 방법을 전달해주었고, 팀원들이 작업을 시작했다.&lt;br&gt;
나는 남은 Due까지 모두가 지치지 않고, 프로젝트를 끝 마칠 수 있도록 돕고싶고, 도울것이다. 팀원들의 성장을 막는 행동은 지속적으로 신경써서 하지 않으려고 한다.&lt;/p&gt;
&lt;h2&gt;3. [회고] 내일 다짐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;팀원의 생각흐름에 관여하지 않기, 흐르는 대로 함께가고, 그곳에서 최선의 방법을 찾아서 제시해주기.&lt;/li&gt;
&lt;li&gt;상대방의 성취감을 뺏지않으려고 노력하기&lt;/li&gt;
&lt;li&gt;자바 기본 문법 3단원까지 공부하기&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-11-01 Today I Learn]]></title><description><![CDATA[1. 회고 221101 회고 개인페이지 제작 팀원들 문제 해결 튜터님과 상담 1) 오늘은 모든 팀원이 개인페이지 개발에 집중하기로 한 날이다. 어젯밤동안 구상한 UI를 Figma를 이용해 구현해보면서 개인페이지에 대한 틀을 잡았다. Figma…]]></description><link>https://mitoconcrete.github.io/22_11_01/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_11_01/</guid><pubDate>Tue, 01 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. [회고] 221101 회고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;개인페이지 제작&lt;/li&gt;
&lt;li&gt;팀원들 문제 해결&lt;/li&gt;
&lt;li&gt;튜터님과 상담&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt;&lt;br&gt;
오늘은 모든 팀원이 개인페이지 개발에 집중하기로 한 날이다. 어젯밤동안 구상한 UI를 Figma를 이용해 구현해보면서 개인페이지에 대한 틀을 잡았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/221101_01.png&quot; alt=&quot;Figma 구상&quot;&gt;&lt;/p&gt;
&lt;p&gt;WIX의 템플릿에서 영감을 받았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/221101_02.png&quot; alt=&quot;레퍼런스 템플릿&quot;&gt;&lt;/p&gt;
&lt;p&gt;모바일은 따로 구상을 한게 아니라, 계속 CSS를 수정하면서 이쁜모양을 찾아보고 최종적으로 디자인을 결정하였다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt;&lt;br&gt;
모든 개발을 마치고, 팀원들이 겪는 어려움을 해결해드렸다.&lt;br&gt;
어려움을 해결해드리는 과정에서 가장 신경썼던 점은, 스스로 문제를 해결하는 즐거움을 팀원들에게 뺏지 않는 것이었다.&lt;br&gt;
한 발자국만 더 가면 문제가 해결되는 경우가 많았기 때문에, 만약 내가 정확한 문제를 짚어 문제를 해결하면 해결하는 속도는 빨라지겠지만, 당사자입장에서는 당장은 좋아도 &apos;아 조금만 더 생각해볼걸&apos;이라는 후회가 남는 경우가 많을 거라고 생각했다.(실제로도 내가 겪음)&lt;br&gt;
따라서, 팀원분들이 겪고계신 문제를 공유해주시면, 우선은 화면을 보면서 정확한 원인을 파악하고 문제가 발생하는 순서를 같이 정렬해보며, 이 문제가 왜 발생했는지 고민해보실 수 있도록 유도했다. 보통은 이 과정 중에 &apos;아!&apos; 하시면서, 문제를 해결하시는 경우가 많았다.&lt;br&gt;
대부분 실패를 두려워하시고, 자신감이 없는 모습을 보이셔서 안타까웠는데, 그럴때마다 &apos;잘하고계십니다! 문제가 있으면 에러를 보여줄거에요. 생각하신 코드를 한번 적어보세요!&apos; 라고 말씀드렸다.&lt;br&gt;
팀원분들께 &apos;생각의 주도권을 뺏지 않았는지&apos;, &apos;설명해드리는 과정에서 속도가 적절했는지&apos; 등등의 피드백을 요청드렸고, 다행이도 긍정적인 피드백을 주셨다.&lt;br&gt;
다만, 지금까지는 내가 겪어봤고 아는 문제였기에 이런 스탠스를 지닐 수 있었지, 내가 모르는 문제들에 대해서도 일목요연하게 문제를 해결 할 수 있을지는 의문이긴하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt;&lt;br&gt;
튜터님과 저녁에 상담을 진행했다. 내 경험들을 들으시고, 내가 현시점에 겪고 있는 고민들을 정확히 짚어주셨다.
&apos;어느 깊이까지 피드백을 드리면 좋을지&apos;, &apos;피드백으로 팀원들의 생각을 방해하는게 아닐지&apos; 또 이후에, 기술적인 고민에 대해서 솔직하게 공유드렸다.&lt;br&gt;
나는 어떤 기술을 습득해서 기획대로 만드는 것에는 자신있는데, 이 기술이 어떤원리로 동작하고 왜 사용하는지에 대해서는 잘 말하지 못한다.
따라서, 이 고민을 공유드렸고, 튜터님께서는 백엔드에서는 문제가 발생했을 때 크리티컬한 문제가 발생하고, 그 원인을 정확하게 진단하기 위해서는 어떤원리로 동작하는지 이해하고 공부해야한다고 답변을 주셨다.&lt;br&gt;
또한, 알고리즘에 대해 자세히 알지 못한다고 말씀드리니 &apos;그건 지금부터 하시면 됩니다!&apos;라고 유쾌하게 말씀주셨다.
퇴사이후 지난 시간동안 했던 스택선택과 커리어적 고민들을 털어놓으니 후련했다.&lt;br&gt;
자바강의를 미리들으며 공부해보는 것을 추천받았는데, 내일부터 한번 들어보려고 한다.&lt;/p&gt;
&lt;h2&gt;2. [회고] 내일 다짐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;상대방의 성취감을 뺏지않으려고 노력하기&lt;/li&gt;
&lt;li&gt;상대방의 말을 듣기&lt;/li&gt;
&lt;li&gt;말하고자하는 것에 대해 명확히하고, 정리가 된 후 입밖으로 말하기&lt;/li&gt;
&lt;li&gt;서로 모르는 문제에 대해, 문제를 해결해 나가는 과정을 의식하고 기록하기&lt;/li&gt;
&lt;li&gt;개인 공부 시작 (자바 + 알고리즘)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-10-31 Today I Learn]]></title><description><![CDATA[1. git git 구조의 이해 git 구조는 디렉토리 + 스테이징 + 저장소의 3가지로 구성되어 버전을 관리한다. 디렉토리 버전을 관리할 코드가 위치한 경로. 즉, .git…]]></description><link>https://mitoconcrete.github.io/22_10_31/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_10_31/</guid><pubDate>Mon, 31 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. [git] git 구조의 이해&lt;/h2&gt;
&lt;p&gt;git 구조는 디렉토리 + 스테이징 + 저장소의 3가지로 구성되어 버전을 관리한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;디렉토리&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;버전을 관리할 코드가 위치한 경로. 즉, .git파일이 위치하는 파일 자체를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스테이징&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;디렉토리에서 감지된 변화가 저장되는 임시 저장소. (git add 커멘드를 이용하여 디렉토리 -&gt; 스테이징으로 변화를 저장한다.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;저장소&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;스테이징에서 commit한 변화를 하나로 묶어 버전으로 저장소에 저장한다.
저장소에 저장된 코드는 github과 같은 코드저장소에 &lt;code class=&quot;language-text&quot;&gt;push&lt;/code&gt; 하여 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2. [git] git pull VS git fetch&lt;/h2&gt;
&lt;p&gt;git fetch와 pull은 원격저장소의 코드의 변화를 감지하는 기능이 있다는데에서 공통점을 가지고 있다.&lt;br&gt;
차이점은, fetch는 원격저장소의 변화가 있어도 로컬의 코드에 덮어쓰지 않고, pull은 원격저장소의 변화를 코드에 덮어씌운다.&lt;/p&gt;
&lt;h2&gt;3. [회고] 221031 회고 : 이기적 개발&lt;/h2&gt;
&lt;p&gt;오늘 처음 내일배움캠프를 참여하여, 팀프로젝트를 진행했다.&lt;br&gt;
미니프로젝트의 주제는 사전캠프를 통해 배운 것들을 이용해, 팀 소개 페이지를 만드는 것이었다.&lt;br&gt;
팀 협업을 너무 오랜만에 해서 좋았지만 두려움도 있었다.&lt;br&gt;
그래서 그런지, 과거의 좋지않은 습관이 나왔다. 주변을 돌아보지 않고 나도모르게 API 문서를 와다다다 작성하고 있었다.&lt;br&gt;
결과적으로 초기 API는 5개가 나왔다. 이후에 매니저님께 문서 피드백 받았는데, 기한을 맞출 수 있는지 우려하셨고 모두의 속도에 맞출 수 있는 대안을 제시해주셨다. 매니저님의 피드백을 듣고, 팀원들의 얼굴을 보았다. 지쳐보이는 기색이 역력했다.&lt;br&gt;
죄송하다고 말씀드리고, API를 기초적인 기능만 빼고 모두 수정하여, 2개만 남겼다.
과연, 나는 오늘 팀원들에게 편안함을 줄 수 있는 동료였는가? 라고 평가를 해보았을 때, 전혀 아니라고 생각했다.&lt;/p&gt;
&lt;h2&gt;4. [회고] 내일 다짐&lt;/h2&gt;
&lt;p&gt;과거의 쓸데없는 경험은 버리자. 겸손하자.&lt;br&gt;
나는 팀 협업경험이 부족했다.&lt;br&gt;
그렇기에 팀과 함께 소통하는 개발자로 성장하고 싶었고, 따라서, PBL(Project Based Learn)방식으로 교육을 진행하는 내일배움캠프에 합류했다.&lt;br&gt;
팀원들의 속도에 맞출 수 있는 개발자로 성장하자.&lt;br&gt;
&apos;제가 예전에 해봤어요.&apos; 라는 설득력없는 근거(라고 쓰고 고집이라고 읽는다)보다, 모두가 납득할 수 있는 근거로 모두를 설득할 수 있는 개발자가 되자. 남을 기분좋게 만드는 사람이 되자.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-09-02 Today I Learn]]></title><description><![CDATA[1. Javascript 실행컨텍스트 추후 추가예정 2. Javascript 스코프 체인 추후 추가예정 3. CS HTTP 상태코드 HTTP 상태코드 포스팅]]></description><link>https://mitoconcrete.github.io/22_09_02/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_09_02/</guid><pubDate>Fri, 02 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. [Javascript] 실행컨텍스트&lt;/h2&gt;
&lt;p&gt;추후 추가예정&lt;/p&gt;
&lt;h2&gt;2. [Javascript] 스코프 체인&lt;/h2&gt;
&lt;p&gt;추후 추가예정&lt;/p&gt;
&lt;h2&gt;3. [CS] HTTP 상태코드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/HTTP_상태코드&quot;&gt;HTTP 상태코드 포스팅&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[HTTP]]></title><description><![CDATA[1. 2xx Success 200 : 성공 201 : 성공 + 새로운 리소스가 생성됨. 새롭게 생성된 리소스의 주소를  헤더에 담아 보낸다. 202 : 요청이 접수되었으나, 당장 처리하지 않음 (ex : 배치) 20…]]></description><link>https://mitoconcrete.github.io/HTTP_상태코드/</link><guid isPermaLink="false">https://mitoconcrete.github.io/HTTP_상태코드/</guid><pubDate>Fri, 02 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. 2xx Success&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;200&lt;/strong&gt; : 성공&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;201&lt;/strong&gt; : 성공 + 새로운 리소스가 생성됨. 새롭게 생성된 리소스의 주소를 &lt;code class=&quot;language-text&quot;&gt;Location&lt;/code&gt; 헤더에 담아 보낸다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;202&lt;/strong&gt; : 요청이 접수되었으나, 당장 처리하지 않음 (ex : 배치)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;204&lt;/strong&gt; : 서버가 요청을 성공적으로 수행했지만, 응답에 보낼 데이터가 없음. (ex: 웹문서 편집기 자동저장)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 3xx Redirection&lt;/h2&gt;
&lt;p&gt;웹브라우저는 &lt;code class=&quot;language-text&quot;&gt;3xx 응답 + Location 헤더&lt;/code&gt;의 응답이 오면 해당주소로 자동이동한다.
이 때 응답주소에 따라 &lt;strong&gt;영구적 리다이렉션&lt;/strong&gt;, &lt;strong&gt;일시적 리다이렉션&lt;/strong&gt; , &lt;strong&gt;특수 리다이렉션&lt;/strong&gt;으로 구분된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;영구적 리다이렉션(301, 308) : 특정 리소스의 URI가 영구적으로 리다이렉트 된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;301 Moved Permanently&lt;/h5&gt;
&lt;p&gt;실무에 많이 쓰임. 새로고침 시 요청이 GET으로 변경되고, 본문이 제거 될 수 있음.&lt;br/&gt;
이용자는 입력을 다시하는 경험을 할 수 있음. 하지만, 보통 입력하는 폼 자체가 모두 변경되기 때문에, 사용자는 체감을 거의하지 못함.&lt;/p&gt;
&lt;h5&gt;308 Parmanent Redirect&lt;/h5&gt;
&lt;p&gt;새로고침 시 요청을 POST로 변경하고, 본문을 유지함.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일시적 리다이렉션(302, 307, 303): 특정 리소스의 URI가 일시적으로 리다이렉트 된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;302 Found&lt;/h5&gt;
&lt;p&gt;새로고침 시 요청이 GET으로 변경되고, 본문이 제거될 수 있음&lt;/p&gt;
&lt;h5&gt;307 Temporary Redirect&lt;/h5&gt;
&lt;p&gt;302와 기능은 같으나, 새로고침 시 요청메서드와 본문을 이전과 동일하게 유지함.(요청메서드 변경X)&lt;/p&gt;
&lt;h5&gt;303&lt;/h5&gt;
&lt;p&gt;302와 기능은 같으나, 새로고침 시 요청메서드를 &lt;strong&gt;무조건&lt;/strong&gt; GET으로 변경됨.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6&gt;PRG(POST/Redirect/GET) - 일시적 리다이렉션&lt;/h6&gt;
&lt;p&gt;PRG 사용으로 중복주문상황을 막을 수 있다.
PRG를 사용하지 않은 상황에선 주문완료이후 유저가 새로고침을 했을 때, 동일 POST 요청이 들어가므로, 의도치않게 동일 주문이 1개 더 생기는 상황이 발생 할 수 있음
PRG를 사용하면, 리다이렉트 후 보여진 화면에서 GET만  호출되기 때문에, 유저가 새로고침을해도 동일주문이 생성되지 않음.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특수 리다이렉션(300, 304) : 결과대신 캐시를 이용한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;300 Multiple chioce&lt;/h5&gt;
&lt;p&gt;요청에 가능한 응답이 두 개 이상 있음을 나타냄 사용자 에이전트 또는 사용자는 둘 중 하나를 선택해야 함. 응답 중 하나를 선택하는 표준화된 방법이 없기 때문에 이 응답 코드는 거의 사용되지 않음. 서버가 원하는 것을 선택하면 Location 헤더를 생성해야함.&lt;/p&gt;
&lt;h5&gt;304 Not Modified&lt;/h5&gt;
&lt;p&gt;주로, GET, HEAD 요청 시 사용한다.
서버가 클라이언트에게 캐시가 만료되지 않았기 때문에 클라이언트에 저장된 캐시를 사용할 수 있도록 유도한다. 응답에 메시지 바디를 포함하면 안된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. 4xx Client Error&lt;/h2&gt;
&lt;p&gt;오류의 원인이 클라이언트에 있기에, 같은 요청을 보냈을 시 100%실패함.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;400 Bad Request&lt;/h5&gt;
&lt;p&gt;클라이언트가 요청내용(파라미터, 메시지)을 다시 검토하고 보내야함.&lt;/p&gt;
&lt;h5&gt;401 Unauthorized&lt;/h5&gt;
&lt;p&gt;클라이언트가 해당리소스에 대한 인증이 필요함. 401 오류 발생시에 응답에 WWW-Authenticate 헤더와 함께 인증방법을 성명해야한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Authentication : 인증(로그인)이 필요&lt;/li&gt;
&lt;li&gt;Authorization : 인가(권한 부여)가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5&gt;403 Forbidden&lt;/h5&gt;
&lt;p&gt;요청을 이해했지만, 권한이 없어 접근이 불가함.&lt;/p&gt;
&lt;h5&gt;404 Not Found&lt;/h5&gt;
&lt;p&gt;요청리소스를 서버에서 찾을 수 없거나, 클라이언트가 권한이 없는 리소스에 요청을 보냈는데, 그 리소스를 숨기고 싶을때&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;4. 5xx Server Error&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h5&gt;500 Internal Server Error&lt;/h5&gt;
&lt;p&gt;서버 내부문제로 오류발생&lt;/p&gt;
&lt;h5&gt;503 Service Unavalidble&lt;/h5&gt;
&lt;p&gt;서버가 일시적인 과부하 또는 예정된 작업을 요청을 처리할 수 없음. Retry-After 헤더로 얼마 뒤에 복구 되는지 보낼 수 있음. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;!중요!&lt;/h2&gt;
&lt;p&gt;500에러는 정말 서버에 문제가 있을 때 내는 것이기 때문에, 비즈니스 로직 상 발생한 문제에 대해서 500보단 2xx, 4xx대 코드로 해결해야함.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-08-30 Today I Learn]]></title><description><![CDATA[1. 라운드 로빈 스케쥴링 시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 간에 우선순위를 두지 않고 순서대로 시간단위로 CPU…]]></description><link>https://mitoconcrete.github.io/22_08_30/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_08_30/</guid><pubDate>Tue, 30 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. 라운드 로빈 스케쥴링&lt;/h2&gt;
&lt;p&gt;시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 간에 우선순위를 두지 않고 순서대로 시간단위로 CPU를 할당하는 스케쥴링 방식입니다.
추후 학습할 자바스크립트 이벤트 루프의 동작방식이 라운드 로빈 스케쥴링 방식입니다.&lt;/p&gt;
&lt;h2&gt;2. 자바스크립트 프로토타입&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/JS_프로토타입&quot;&gt;프로토타입 학습 링크&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프로토타입에 관하여]]></title><description><![CDATA[prototype 원형을 의미합니다.
원형의 속성을 조회하고 싶다면 아래와 같이 조회하면 된다. 하지만 new 키워드를 통해서 만든 복제품 에게는 원형의 속성을 조회할 수 없다.
예를 들어 아래의 코드에서는 prototype 이 undefined…]]></description><link>https://mitoconcrete.github.io/JS_프로토타입/</link><guid isPermaLink="false">https://mitoconcrete.github.io/JS_프로토타입/</guid><pubDate>Tue, 30 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;prototype&lt;/h2&gt;
&lt;p&gt;원형을 의미합니다.
원형의 속성을 조회하고 싶다면 아래와 같이 조회하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token comment&quot;&gt;// {...}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 new 키워드를 통해서 만든 &lt;strong&gt;복제품&lt;/strong&gt; 에게는 원형의 속성을 조회할 수 없다.
예를 들어 아래의 코드에서는 prototype 이 undefined 로 동작한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;[[Prototype]]&lt;/h2&gt;
&lt;p&gt;원형의 속성의 주소를 저장하고 있는 내부 속성인 &lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt; 을 이용하여, 자식들에게 할당한다.
조회는 &lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;getPrototypeOf()&lt;/code&gt;을 이용하여 접근가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Bar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Foo
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Coo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Bar&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Bar&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token comment&quot;&gt;// 1. foo&lt;/span&gt;
Coo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token comment&quot;&gt;// 2. foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bar와 Coo에는 직접적인 name이라는 프로퍼티가 할당되어 있지않다. 하지만, 어떻게 name이라는 속성에 접근할 수 있었을까?
name을 조회하기 위해서 자바스크립트 엔진은 현재 인스턴스에 name이란게 없다면, 내부속성인 &lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt; 을 순차적으로 조회하며 name이라는 속성이 있는지 조회한다.&lt;/p&gt;
&lt;p&gt;아래는 Bar.name 시 foo가 출력되는 순서이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Bar.name -&gt; 없음&lt;/li&gt;
&lt;li&gt;Bar.&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;.name (=Foo.name) -&gt; &lt;strong&gt;&lt;em&gt;있음!&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;foo 출력&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래는 Coo.name 시 foo가 출력되는 순서이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Coo.name -&gt; 없음&lt;/li&gt;
&lt;li&gt;Coo.&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;.name (=Bar.name) -&gt; 없음&lt;/li&gt;
&lt;li&gt;Coo.&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;.&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;.name (=Foo.name) -&gt; &lt;strong&gt;&lt;em&gt;있음!&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;foo 출력&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;실제로 &lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt; 이 쓰이진 않고 위에서 언급한 것 처럼 &lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;getPrototypeOf()&lt;/code&gt;를 이용해 조회할 수 있다.&lt;/p&gt;
&lt;p&gt;그렇다면 아래의 상황에서는 어떻게 동작할까? &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Bar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Foo
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Coo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Bar&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Bar&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token comment&quot;&gt;// 1. foo&lt;/span&gt;

Coo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;coo&apos;&lt;/span&gt; 

Foo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token comment&quot;&gt;// 2. ?&lt;/span&gt;
Bar&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token comment&quot;&gt;// 3. ? &lt;/span&gt;
Coo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token comment&quot;&gt;// 4. ? &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정답은 &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;foo &lt;/li&gt;
&lt;li&gt;coo
이다. &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;2, 3의 동작은 위와 같지만, 4의 동작이 조금 달라진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Coo.name -&gt; 있음&lt;/li&gt;
&lt;li&gt;coo 출력&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;새롭게 name을 자식에 할당함으로서, &lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;을 조회하지 않고, 곧바로 name을 가져올 수 있었다.&lt;/p&gt;
&lt;h2&gt;프로토타입 체인&lt;/h2&gt;
&lt;p&gt;위의 과정에서 아래와 같은 과정을 거쳤다.
Coo.&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;.name (=Bar.name)
Coo.&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;.&lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;.name (=Foo.name)&lt;/p&gt;
&lt;p&gt;이 처럼 없는 속성을 계속 연결된 &lt;code class=&quot;language-text&quot;&gt;[[Prototype]]&lt;/code&gt;주소를 통해 찾아내려가는 현상이 마치 체인처럼 이어졌다고하여, &lt;strong&gt;프로토타입 체인&lt;/strong&gt; 이라고 명명한다.&lt;/p&gt;
&lt;h2&gt;constructor&lt;/h2&gt;
&lt;p&gt;constructor는 new 키워드를 이용하여 생성된 인스턴스가 자신을 낳은 주체가 무엇인지 표현하기 위해 사용되는 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token comment&quot;&gt;// function Array&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
foo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token comment&quot;&gt;// function Foo&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;참고&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tecoble.techcourse.co.kr/post/2021-06-14-prototype/&quot;&gt;https://tecoble.techcourse.co.kr/post/2021-06-14-prototype/&lt;/a&gt;
&lt;a href=&quot;https://ko.javascript.info/function-prototype&quot;&gt;https://ko.javascript.info/function-prototype&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-08-29 Today I Learn]]></title><description><![CDATA[1. 이벤트 실행 우선순위 인라인 이벤트실행 -> addEventListener 이벤트 실행
인라인 이벤트는 event 객체가 parameter로 넘겨지지 않습니다. 2. 버블링과 캡쳐링 버블링과 캡쳐링에 대하여]]></description><link>https://mitoconcrete.github.io/22_08_29/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_08_29/</guid><pubDate>Mon, 29 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. 이벤트 실행 우선순위&lt;/h2&gt;
&lt;p&gt;인라인 이벤트실행 -&gt; addEventListener 이벤트 실행
인라인 이벤트는 event 객체가 parameter로 넘겨지지 않습니다.&lt;/p&gt;
&lt;h2&gt;2. 버블링과 캡쳐링&lt;/h2&gt;
&lt;p&gt;&lt;a href=&apos;/JS_버블링과캡쳐링&apos;&gt;버블링과 캡쳐링에 대하여&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[이벤트 버블링/캡쳐링]]></title><description><![CDATA[1. 버블링 정의 한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작하는 현상.…]]></description><link>https://mitoconcrete.github.io/JS_버블링과캡쳐링/</link><guid isPermaLink="false">https://mitoconcrete.github.io/JS_버블링과캡쳐링/</guid><pubDate>Mon, 29 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. 버블링 정의&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작하는 현상.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&apos;https://ko.javascript.info/article/bubbling-and-capturing/event-order-bubbling.svg&apos; width=&apos;300&apos; alt=&apos;[출처]javascript korea&apos;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2. 캡쳐링 정의&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;이벤트가 상위에서 하위로 전달되며 핸들러를 실행하는 현상.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&apos;https://ko.javascript.info/article/bubbling-and-capturing/eventflow.svg&apos; width=&apos;300&apos; alt=&apos;[출처]javascript korea&apos;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 구조에서 c를 클릭했을 경우, 이벤트가 a -&gt; b -&gt; c 로 전파되는 현상을 의미한다.
다음과 같이 event 를 등록 할 떄, capture option을 활성화하여 사용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// or &lt;/span&gt;

el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3. stopPropagation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;propagation의 뜻은 &lt;strong&gt;번식&lt;/strong&gt; 이다.
부모 element로의 캡쳐링/버블링을 막기위해선, stopPropagation 을 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;을 실행하게 되면, 이벤트는 c에서만 실행되게 된다.&lt;/p&gt;
&lt;h2&gt;4. stopImmediatePropagation&lt;/h2&gt;
&lt;p&gt;같은 레벨에 여러가지 이벤트 리스너가 등록되어 있을 경우에, stopPropagation을 사용하면
동일레벨에서의 메서드 실행을 제어하지 못한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;함수&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;B&lt;/span&gt;함수&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 케이스에서 A함수의 실행만 시키고 싶어 stopPropagation을 함수내부에서 호출하여도, 같은레벨의 B함수는 계속 실행된다.
이유는 stopPropagation은 상위레벨로의 이벤트 전파만 방지하기 때문이다.&lt;/p&gt;
&lt;p&gt;위의 케이스에서는 stopImmediatePropatation을 사용하여, 같은레벨로 이벤트가 전파되는 것을 방지해준다.&lt;/p&gt;
&lt;h2&gt;5. Bubbling 되지않는 메서드&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;focus &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. event.target vs event.currentTarget vs event.eventPhase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;event.target :&lt;/strong&gt; 실제 이벤트가 발생한 타겟.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;event.currentTarget :&lt;/strong&gt; 현재 이벤트가 벌어지고 있는 모타겟.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;event.eventPhase :&lt;/strong&gt;  현재 이벤트 흐름 단계(캡처링=1, 타깃=2, 버블링=3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;7. 버블링을 굳이 막을 필요는 없다.&lt;/h2&gt;
&lt;p&gt;지금은 상위 요소에서 이벤트가 어떻게 쓰일지 확실치 않더라도, 추후에 버블링이 필요한 경우가 생기기 때문에 stopPropagation의 사용은 추천하지 않는다.&lt;/p&gt;
&lt;h2&gt;8. Bubbling이 Default value가 된 배경.&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;현실에서 사고가 발생하면 지역 경찰이 먼저 사고를 조사합니다. 그 지역에 대해 가장 잘 아는 기관은 지역 경찰이기 때문입니다. 추가 조사가 필요하다면 그 이후에 상위 기관이 사건을 넘겨받습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;9. 이벤트 위임(event delegation)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;캡쳐링과 버블링을 이용한 이벤트 핸들링 패턴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;참고문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ko.javascript.info/bubbling-and-capturing&quot;&gt;https://ko.javascript.info/bubbling-and-capturing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/&quot;&gt;https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-08-28 Today I Learn]]></title><description><![CDATA[해시 테이블…]]></description><link>https://mitoconcrete.github.io/22_08_28/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_08_28/</guid><pubDate>Sun, 28 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;해시 테이블&lt;/h2&gt;
&lt;h3&gt;1. 개념&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;해시 - 고기와 감자를 잘게다져 요리한것. 키 값을 잘게 다져 특정 인덱스로 변경
&lt;br/&gt;-&gt; 키와 값을 받아 &lt;strong&gt;키를 해싱(잘게 쪼개어)&lt;/strong&gt;하여 도출된 인덱스에 값을 저장하는 구조&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;해시테이블이란?&lt;/strong&gt;&lt;br/&gt;  입력받은 값을 특정범위내의 숫자로 변경하는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 해시충돌&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;해시함수를 거친 값이 동일하다면, 데이터가 삽입되는 위치가 중복되는 현상&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;2-1. 해시충돌해결방법 1 : 선형탐사법&lt;/h4&gt;
&lt;p&gt;충돌이 발생하면 다음인덱스에 데이터 저장. 충돌이 발생하면 다른곳에 저장.&lt;/p&gt;
&lt;h4&gt;2-2. 해시충돌해결방법 2 : 제곱탐사법&lt;/h4&gt;
&lt;p&gt;충돌이 발생한 지점의 제곱만큼 옆으로 이동하여 데이터 저장 &lt;/p&gt;
&lt;h4&gt;2-3. 해시충돌해결방법 3 : 이중 해싱&lt;/h4&gt;
&lt;p&gt;A함수를 이용해 충돌이 발생하면 B함수를 통해 해싱하는것&lt;/p&gt;
&lt;h4&gt;2-4. 해시충돌해결방법 4 : 분리 연결&lt;/h4&gt;
&lt;p&gt;충돌이 발생하면, 연결리스트로직을 이용해 메모리에 저장. 한 메모리 내에 차지하는 데이터가 무한정 늘어날수 있음.&lt;/p&gt;
&lt;h3&gt;3.자바스크립트에서 해시테이블을 사용하는 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;배열&lt;/li&gt;
&lt;li&gt;객체&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;Map&lt;/a&gt; :&lt;/strong&gt; 키와 값이 다르게 저장. 키로 여러가지 타입을 저장할 수 있음.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;Set&lt;/a&gt; :&lt;/strong&gt; 키와 값이 동일하게 저장. 중복된 내용 제거&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-08-25 Today I Learn]]></title><description><![CDATA[1. Javascript 구조분해할당을 통해 Swap을 구현 할 수 있다. ES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음. 2. Javascript shift() 를 이용한 큐 구현은 효율적이지 못하다. shift…]]></description><link>https://mitoconcrete.github.io/22_08_25/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_08_25/</guid><pubDate>Thu, 25 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;1. [Javascript] 구조분해할당을 통해 Swap을 구현 할 수 있다.&lt;/h3&gt;
&lt;p&gt;ES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. [Javascript] shift() 를 이용한 큐 구현은 효율적이지 못하다.&lt;/h3&gt;
&lt;p&gt;shift를 이용하게 되면, 빈 첫번째 메모리를 메우는 동작을 하기 때문에 n의 속도가 보장된다.
따라서, 1의 속도를 보장해야하는 큐에서 적절하지 못하다. 아래와 같이 delete 를 이용하여 사용하면된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;location&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; priority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; location
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;priority &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; priority
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rear &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;location&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; priority&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 추가 시 길이를 1늘려준다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rear&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; priority&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 삭제시 앞에 빈칸을 하나 추가하고, head의 인덱스를 1증가시킨다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// delete를 이용했기 때문에, 1의 속도를 보장한다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. [HTTP] 상태코드의 종류&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1xx :&lt;/strong&gt; 요청이 수신되어 처리중 (거의사용하지않음)
&lt;strong&gt;2xx :&lt;/strong&gt; 정상처리
&lt;strong&gt;3xx :&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;요청을 완료하기 위해 추가적인 행동이 필요&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;4xx :&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;클라이언트 오류&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;5xx :&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;서버 오류&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;4. [HTTP] 상태코드 추론&lt;/h3&gt;
&lt;p&gt;클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면 클라이언트는 &lt;strong&gt;상위 상태코드&lt;/strong&gt;로 해석해서 처리한다.&lt;br/&gt;
따라서, 미래에 새로운 상태코드가 추가되어도 클라이언트를 변경하지 않아도 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;388 -&gt; 3xx
499 -&gt; 4xx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[✏️ 2022-08-24 Today I Learn]]></title><description><![CDATA[1. form 을 통한 데이터 전송 시 http contents type aplication/x-www-form-urlencoded : string을 인코딩해서 전달해야 하기 때문에 urlencoded 라는 타입을 명시하여 사용한다. multipart…]]></description><link>https://mitoconcrete.github.io/22_08_24/</link><guid isPermaLink="false">https://mitoconcrete.github.io/22_08_24/</guid><pubDate>Wed, 24 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;1. form 을 통한 데이터 전송 시 http contents type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;aplication/x-www-form-urlencoded&lt;/strong&gt; : string을 인코딩해서 전달해야 하기 때문에 urlencoded 라는 타입을 명시하여 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;multipart/form-data&lt;/strong&gt; : 이미지 전송 시, 바이너리 파일로 여러 파트를 끊어서 보내야 할 경우 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. HTML form으로 GET요청도 가능하다.&lt;/h3&gt;
&lt;h3&gt;3. PUT은 일부 업데이트가 아니다.&lt;/h3&gt;
&lt;p&gt;기존의 리소스를 삭제하고 다른 리소스로 갈아치우는 것이기 때문에, 주의하여 사용해야한다.&lt;/p&gt;
&lt;h3&gt;4. PATCH는 리소스의 일부 업데이트를 의미한다.&lt;/h3&gt;
&lt;h3&gt;5. HTTP 메소드의 속성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;안전&lt;/strong&gt; : 호출해도 리소스를 변경하지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET, HEAD, OPTION, TRACE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;멱등&lt;/strong&gt; : 여러번 호출해도 같은 결과를 보여준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET, PUT, DELETE &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;캐시&lt;/strong&gt; : 응답결과의 리소스를 반복하여 사용가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET, HEAD&lt;/li&gt;
&lt;li&gt;POST, PUT : 캐시키를 이용해 body값까지 모두 캐싱해야하기 때문에 번거로워서 잘 쓰이지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6. 메서드 설계 시 리소스에 해당되는 것은 &apos;명사&apos;이다.&lt;/h3&gt;
&lt;p&gt;ex) 미네랄을 캔다 에서 캔다가 중요요소가 아니라 미네랄을 기준으로 메서드를 설계해야한다.
GET /minerals -&gt; O
GET /dig -&gt; X &lt;/p&gt;
&lt;h3&gt;7. GET은 스펙상으로 body를 붙힐 수 있다.&lt;/h3&gt;
&lt;p&gt;구현이 되지 않은 서버가 많은 것일 뿐.&lt;/p&gt;
&lt;h3&gt;8. HEAD는 body를 붙힐 수 없는 GET이라고 보면된다.&lt;/h3&gt;
&lt;h3&gt;9. POST는 리소스 상태의 변경을 위한 용도로도 사용된다.&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;POST /car/{id}/start
POST /car/{id}/stop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이때는 메서드에 동사를 사용한다.&lt;/p&gt;
&lt;h3&gt;10. POST와 PUT의 차이는 리소스의 정보를 어디서 알고있느냐의 차이다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;POST : 리소스의 생성을 요청하면, 서버에서 생성정보를 보내줌&lt;/li&gt;
&lt;li&gt;PUT : 클라이언트에서 업데이트 할 리소스를 정해서 보내줌. 이 때, 클라이언트 내에 스토어로 리소스를 따로 관리해줘야하는 전제조건이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;11. 배열은 연속되는 순서로 메모리를 차지한다. 인덱스 값은 연속되지만, 주소값은 반드시 연속되어 증가하지 않는다.&lt;/h3&gt;
&lt;h3&gt;12. 자바스크립트 배열은 해시맵과 같아서, 논리값 할당이 가능하다. 단, 배열의 실제길이에 영향을 주지는 않는다.(사용권장X)&lt;/h3&gt;
&lt;h3&gt;13. 연결리스트는 메모리를 순서대로 차지하지 않는다.&lt;/h3&gt;</content:encoded></item></channel></rss>