{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"1. 회고 221101 회고 개인페이지 제작 팀원들 문제 해결 튜터님과 상담 1) 오늘은 모든 팀원이 개인페이지 개발에 집중하기로 한 날이다. 어젯밤동안 구상한 UI를 Figma를 이용해 구현해보면서 개인페이지에 대한 틀을 잡았다.\nFigma 구상\nWIX의 템플릿에서 영감을 받았다.\n레퍼런스 템플릿\n모바일은 따로 구상을 한게 아니라, 계속 CSS를 수정하…","fields":{"slug":"/22_11_01/"},"frontmatter":{"date":"November 01, 2022","title":"✏️ 2022-11-01 Today I Learn","tags":["CSS","TIL","스파르타코딩캠프","내일배움캠프"]},"rawMarkdownBody":"\n## 1. [회고] 221101 회고\n\n1. 개인페이지 제작\n2. 팀원들 문제 해결\n3. 튜터님과 상담\n\n**1)**  \n오늘은 모든 팀원이 개인페이지 개발에 집중하기로 한 날이다. 어젯밤동안 구상한 UI를 Figma를 이용해 구현해보면서 개인페이지에 대한 틀을 잡았다.\n![Figma 구상](/image/221101_01.png)\nWIX의 템플릿에서 영감을 받았다.\n![레퍼런스 템플릿](/image/221101_02.png)\n모바일은 따로 구상을 한게 아니라, 계속 CSS를 수정하면서 이쁜모양을 찾아보고 최종적으로 디자인을 결정하였다.\n\n**2)**  \n모든 개발을 마치고, 팀원들이 겪는 어려움을 해결해드렸다.  \n어려움을 해결해드리는 과정에서 가장 신경썼던 점은, 스스로 문제를 해결하는 즐거움을 팀원들에게 뺏지 않는 것이었다.  \n한 발자국만 더 가면 문제가 해결되는 경우가 많았기 때문에, 만약 내가 정확한 문제를 짚어 문제를 해결하면 해결하는 속도는 빨라지겠지만, 당사자입장에서는 당장은 좋아도 '아 조금만 더 생각해볼걸'이라는 후회가 남는 경우가 많을 거라고 생각했다.(실제로도 내가 겪음)  \n따라서, 팀원분들이 겪고계신 문제를 공유해주시면, 우선은 화면을 보면서 정확한 원인을 파악하고 문제가 발생하는 순서를 같이 정렬해보며, 이 문제가 왜 발생했는지 고민해보실 수 있도록 유도했다. 보통은 이 과정 중에 '아!' 하시면서, 문제를 해결하시는 경우가 많았다.  \n대부분 실패를 두려워하시고, 자신감이 없는 모습을 보이셔서 안타까웠는데, 그럴때마다 '잘하고계십니다! 문제가 있으면 에러를 보여줄거에요. 생각하신 코드를 한번 적어보세요!' 라고 말씀드렸다.  \n팀원분들께 '생각의 주도권을 뺏지 않았는지', '설명해드리는 과정에서 속도가 적절했는지' 등등의 피드백을 요청드렸고, 다행이도 긍정적인 피드백을 주셨다.  \n다만, 지금까지는 내가 겪어봤고 아는 문제였기에 이런 스탠스를 지닐 수 있었지, 내가 모르는 문제들에 대해서도 일목요연하게 문제를 해결 할 수 있을지는 의문이긴하다.\n\n**3)**  \n튜터님과 저녁에 상담을 진행했다. 내 경험들을 들으시고, 내가 현시점에 겪고 있는 고민들을 정확히 짚어주셨다.\n'어느 깊이까지 피드백을 드리면 좋을지', '피드백으로 팀원들의 생각을 방해하는게 아닐지' 또 이후에, 기술적인 고민에 대해서 솔직하게 공유드렸다.  \n나는 어떤 기술을 습득해서 기획대로 만드는 것에는 자신있는데, 이 기술이 어떤원리로 동작하고 왜 사용하는지에 대해서는 잘 말하지 못한다.\n따라서, 이 고민을 공유드렸고, 튜터님께서는 백엔드에서는 문제가 발생했을 때 크리티컬한 문제가 발생하고, 그 원인을 정확하게 진단하기 위해서는 어떤원리로 동작하는지 이해하고 공부해야한다고 답변을 주셨다.  \n또한, 알고리즘에 대해 자세히 알지 못한다고 말씀드리니 '그건 지금부터 하시면 됩니다!'라고 유쾌하게 말씀주셨다.\n퇴사이후 지난 시간동안 했던 스택선택과 커리어적 고민들을 털어놓으니 후련했다.  \n자바강의를 미리들으며 공부해보는 것을 추천받았는데, 내일부터 한번 들어보려고 한다.\n\n## 2. [회고] 내일 다짐\n\n- 상대방의 성취감을 뺏지않으려고 노력하기\n- 상대방의 말을 듣기\n- 말하고자하는 것에 대해 명확히하고, 정리가 된 후 입밖으로 말하기\n- 서로 모르는 문제에 대해, 문제를 해결해 나가는 과정을 의식하고 기록하기\n- 개인 공부 시작 (자바 + 알고리즘)\n"},{"excerpt":"1. git git 구조의 이해 git 구조는 디렉토리 + 스테이징 + 저장소의 3가지로 구성되어 버전을 관리한다. 디렉토리 버전을 관리할 코드가 위치한 경로. 즉, .git파일이 위치하는 파일 자체를 의미한다. 스테이징 디렉토리에서 감지된 변화가 저장되는 임시 저장소. (git add 커멘드를 이용하여 디렉토리 -> 스테이징으로 변화를 저장한다.) 저장…","fields":{"slug":"/22_10_31/"},"frontmatter":{"date":"October 31, 2022","title":"✏️ 2022-10-31 Today I Learn","tags":["git","TIL","스파르타코딩캠프","내일배움캠프"]},"rawMarkdownBody":"\n## 1. [git] git 구조의 이해\n\ngit 구조는 디렉토리 + 스테이징 + 저장소의 3가지로 구성되어 버전을 관리한다.\n\n1. 디렉토리\n   > 버전을 관리할 코드가 위치한 경로. 즉, .git파일이 위치하는 파일 자체를 의미한다.\n2. 스테이징\n   > 디렉토리에서 감지된 변화가 저장되는 임시 저장소. (git add 커멘드를 이용하여 디렉토리 -> 스테이징으로 변화를 저장한다.)\n3. 저장소\n   > 스테이징에서 commit한 변화를 하나로 묶어 버전으로 저장소에 저장한다.\n   > 저장소에 저장된 코드는 github과 같은 코드저장소에 `push` 하여 사용한다.\n\n## 2. [git] git pull VS git fetch\n\ngit fetch와 pull은 원격저장소의 코드의 변화를 감지하는 기능이 있다는데에서 공통점을 가지고 있다.  \n차이점은, fetch는 원격저장소의 변화가 있어도 로컬의 코드에 덮어쓰지 않고, pull은 원격저장소의 변화를 코드에 덮어씌운다.\n\n## 3. [회고] 221031 회고 : 이기적 개발\n\n오늘 처음 내일배움캠프를 참여하여, 팀프로젝트를 진행했다.  \n미니프로젝트의 주제는 사전캠프를 통해 배운 것들을 이용해, 팀 소개 페이지를 만드는 것이었다.  \n팀 협업을 너무 오랜만에 해서 좋았지만 두려움도 있었다.  \n그래서 그런지, 과거의 좋지않은 습관이 나왔다. 주변을 돌아보지 않고 나도모르게 API 문서를 와다다다 작성하고 있었다.  \n결과적으로 초기 API는 5개가 나왔다. 이후에 매니저님께 문서 피드백 받았는데, 기한을 맞출 수 있는지 우려하셨고 모두의 속도에 맞출 수 있는 대안을 제시해주셨다. 매니저님의 피드백을 듣고, 팀원들의 얼굴을 보았다. 지쳐보이는 기색이 역력했다.  \n죄송하다고 말씀드리고, API를 기초적인 기능만 빼고 모두 수정하여, 2개만 남겼다.\n과연, 나는 오늘 팀원들에게 편안함을 줄 수 있는 동료였는가? 라고 평가를 해보았을 때, 전혀 아니라고 생각했다.\n\n## 4. [회고] 내일 다짐\n\n과거의 쓸데없는 경험은 버리자. 겸손하자.  \n나는 팀 협업경험이 부족했다.  \n그렇기에 팀과 함께 소통하는 개발자로 성장하고 싶었고, 따라서, PBL(Project Based Learn)방식으로 교육을 진행하는 내일배움캠프에 합류했다.  \n팀원들의 속도에 맞출 수 있는 개발자로 성장하자.  \n'제가 예전에 해봤어요.' 라는 설득력없는 근거(라고 쓰고 고집이라고 읽는다)보다, 모두가 납득할 수 있는 근거로 모두를 설득할 수 있는 개발자가 되자. 남을 기분좋게 만드는 사람이 되자.\n"},{"excerpt":"1. Javascript 실행컨텍스트 추후 추가예정 2. Javascript 스코프 체인 추후 추가예정 3. CS HTTP 상태코드 HTTP 상태코드 포스팅","fields":{"slug":"/22_09_02/"},"frontmatter":{"date":"September 02, 2022","title":"✏️ 2022-09-02 Today I Learn","tags":["TIL","Javascript","CS"]},"rawMarkdownBody":"\n## 1. [Javascript] 실행컨텍스트\n추후 추가예정\n\n## 2. [Javascript] 스코프 체인\n추후 추가예정\n\n## 3. [CS] HTTP 상태코드\n<a href=\"/HTTP_상태코드\">HTTP 상태코드 포스팅</a>"},{"excerpt":"1. 2xx Success 200 : 성공 201 : 성공 + 새로운 리소스가 생성됨. 새롭게 생성된 리소스의 주소를  헤더에 담아 보낸다. 202 : 요청이 접수되었으나, 당장 처리하지 않음 (ex : 배치) 204 : 서버가 요청을 성공적으로 수행했지만, 응답에 보낼 데이터가 없음. (ex: 웹문서 편집기 자동저장) 2. 3xx Redirection …","fields":{"slug":"/HTTP_상태코드/"},"frontmatter":{"date":"September 02, 2022","title":"HTTP","tags":["TIL","Network","HTTP"]},"rawMarkdownBody":"\n## 1. 2xx Success\n- **200** : 성공\n- **201** : 성공 + 새로운 리소스가 생성됨. 새롭게 생성된 리소스의 주소를 `Location` 헤더에 담아 보낸다.\n- **202** : 요청이 접수되었으나, 당장 처리하지 않음 (ex : 배치)\n- **204** : 서버가 요청을 성공적으로 수행했지만, 응답에 보낼 데이터가 없음. (ex: 웹문서 편집기 자동저장)\n\n## 2. 3xx Redirection\n웹브라우저는 `3xx 응답 + Location 헤더`의 응답이 오면 해당주소로 자동이동한다.\n이 때 응답주소에 따라 **영구적 리다이렉션**, **일시적 리다이렉션** , **특수 리다이렉션**으로 구분된다.\n- 영구적 리다이렉션(301, 308) : 특정 리소스의 URI가 영구적으로 리다이렉트 된다.\n> ##### 301 Moved Permanently \n> 실무에 많이 쓰임. 새로고침 시 요청이 GET으로 변경되고, 본문이 제거 될 수 있음.<br/>\n이용자는 입력을 다시하는 경험을 할 수 있음. 하지만, 보통 입력하는 폼 자체가 모두 변경되기 때문에, 사용자는 체감을 거의하지 못함.\n> ##### 308 Parmanent Redirect\n> 새로고침 시 요청을 POST로 변경하고, 본문을 유지함.\n\n- 일시적 리다이렉션(302, 307, 303): 특정 리소스의 URI가 일시적으로 리다이렉트 된다.\n> ##### 302 Found\n> 새로고침 시 요청이 GET으로 변경되고, 본문이 제거될 수 있음\n> ##### 307 Temporary Redirect\n> 302와 기능은 같으나, 새로고침 시 요청메서드와 본문을 이전과 동일하게 유지함.(요청메서드 변경X)\n> ##### 303 \n> 302와 기능은 같으나, 새로고침 시 요청메서드를 **무조건** GET으로 변경됨.\n>> ###### PRG(POST/Redirect/GET) - 일시적 리다이렉션\n>> PRG 사용으로 중복주문상황을 막을 수 있다.\nPRG를 사용하지 않은 상황에선 주문완료이후 유저가 새로고침을 했을 때, 동일 POST 요청이 들어가므로, 의도치않게 동일 주문이 1개 더 생기는 상황이 발생 할 수 있음\nPRG를 사용하면, 리다이렉트 후 보여진 화면에서 GET만  호출되기 때문에, 유저가 새로고침을해도 동일주문이 생성되지 않음.\n\n- 특수 리다이렉션(300, 304) : 결과대신 캐시를 이용한다.\n> ##### 300 Multiple chioce \n> 요청에 가능한 응답이 두 개 이상 있음을 나타냄 사용자 에이전트 또는 사용자는 둘 중 하나를 선택해야 함. 응답 중 하나를 선택하는 표준화된 방법이 없기 때문에 이 응답 코드는 거의 사용되지 않음. 서버가 원하는 것을 선택하면 Location 헤더를 생성해야함.\n> ##### 304 Not Modified\n> 주로, GET, HEAD 요청 시 사용한다.\n서버가 클라이언트에게 캐시가 만료되지 않았기 때문에 클라이언트에 저장된 캐시를 사용할 수 있도록 유도한다. 응답에 메시지 바디를 포함하면 안된다.\n\n## 3. 4xx Client Error\n오류의 원인이 클라이언트에 있기에, 같은 요청을 보냈을 시 100%실패함.\n> ##### 400 Bad Request\n클라이언트가 요청내용(파라미터, 메시지)을 다시 검토하고 보내야함.\n> ##### 401 Unauthorized\n클라이언트가 해당리소스에 대한 인증이 필요함. 401 오류 발생시에 응답에 WWW-Authenticate 헤더와 함께 인증방법을 성명해야한다.\n>> - Authentication : 인증(로그인)이 필요\n>> - Authorization : 인가(권한 부여)가 필요\n> ##### 403 Forbidden\n요청을 이해했지만, 권한이 없어 접근이 불가함.\n> ##### 404 Not Found\n요청리소스를 서버에서 찾을 수 없거나, 클라이언트가 권한이 없는 리소스에 요청을 보냈는데, 그 리소스를 숨기고 싶을때\n\n## 4. 5xx Server Error\n> ##### 500 Internal Server Error\n서버 내부문제로 오류발생\n> ##### 503 Service Unavalidble\n서버가 일시적인 과부하 또는 예정된 작업을 요청을 처리할 수 없음. Retry-After 헤더로 얼마 뒤에 복구 되는지 보낼 수 있음. \n\n## !중요!\n500에러는 정말 서버에 문제가 있을 때 내는 것이기 때문에, 비즈니스 로직 상 발생한 문제에 대해서 500보단 2xx, 4xx대 코드로 해결해야함.\n"},{"excerpt":"1. 라운드 로빈 스케쥴링 시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 간에 우선순위를 두지 않고 순서대로 시간단위로 CPU를 할당하는 스케쥴링 방식입니다.\n추후 학습할 자바스크립트 이벤트 루프의 동작방식이 라운드 로빈 스케쥴링 방식입니다. 2. 자바스크립트 프로토타입 프로토타입 학습 링크","fields":{"slug":"/22_08_30/"},"frontmatter":{"date":"August 30, 2022","title":"✏️ 2022-08-30 Today I Learn","tags":["TIL","Javascript","CS"]},"rawMarkdownBody":"\n## 1. 라운드 로빈 스케쥴링\n시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 간에 우선순위를 두지 않고 순서대로 시간단위로 CPU를 할당하는 스케쥴링 방식입니다.\n추후 학습할 자바스크립트 이벤트 루프의 동작방식이 라운드 로빈 스케쥴링 방식입니다.\n\n\n## 2. 자바스크립트 프로토타입\n<a href=\"/JS_프로토타입\">프로토타입 학습 링크</a>\n"},{"excerpt":"prototype 원형을 의미합니다.\n원형의 속성을 조회하고 싶다면 아래와 같이 조회하면 된다. 하지만 new 키워드를 통해서 만든 복제품 에게는 원형의 속성을 조회할 수 없다.\n예를 들어 아래의 코드에서는 prototype 이 undefined 로 동작한다. [Prototype] 원형의 속성의 주소를 저장하고 있는 내부 속성인  을 이용하여, 자식들에게…","fields":{"slug":"/JS_프로토타입/"},"frontmatter":{"date":"August 30, 2022","title":"프로토타입에 관하여","tags":["TIL","Javascript","prototype"]},"rawMarkdownBody":"\n## prototype\n원형을 의미합니다.\n원형의 속성을 조회하고 싶다면 아래와 같이 조회하면 된다.\n```javascript\nObject.prototype // {...}\n```\n하지만 new 키워드를 통해서 만든 **복제품** 에게는 원형의 속성을 조회할 수 없다.\n예를 들어 아래의 코드에서는 prototype 이 undefined 로 동작한다.\n```javascript\nconst obj = new Object()\nobj.prototype // undefined\n```\n\n## [[Prototype]]\n원형의 속성의 주소를 저장하고 있는 내부 속성인 `[[Prototype]]` 을 이용하여, 자식들에게 할당한다.\n조회는 `__proto__` 혹은 `getPrototypeOf()`을 이용하여 접근가능하다.\n```javascript\nconst Foo = {\n  name : 'foo'\n}\n\nconst Bar = {\n  __proto__ : Foo\n}\n\nconst Coo = Object.create(Bar)\n\nBar.name // 1. foo\nCoo.name // 2. foo\n```\nBar와 Coo에는 직접적인 name이라는 프로퍼티가 할당되어 있지않다. 하지만, 어떻게 name이라는 속성에 접근할 수 있었을까?\nname을 조회하기 위해서 자바스크립트 엔진은 현재 인스턴스에 name이란게 없다면, 내부속성인 `[[Prototype]]` 을 순차적으로 조회하며 name이라는 속성이 있는지 조회한다.\n\n아래는 Bar.name 시 foo가 출력되는 순서이다.\n> 1. Bar.name -> 없음\n> 2. Bar.`[[Prototype]]`.name (=Foo.name) -> ***있음!***\n> 3. foo 출력\n\n아래는 Coo.name 시 foo가 출력되는 순서이다.\n> 1. Coo.name -> 없음\n> 2. Coo.`[[Prototype]]`.name (=Bar.name) -> 없음\n> 3. Coo.`[[Prototype]]`.`[[Prototype]]`.name (=Foo.name) -> ***있음!***\n> 4. foo 출력\n\n실제로 `[[Prototype]]` 이 쓰이진 않고 위에서 언급한 것 처럼 `__proto__` 혹은 `getPrototypeOf()`를 이용해 조회할 수 있다.\n\n그렇다면 아래의 상황에서는 어떻게 동작할까? \n```javascript\nconst Foo = {\n  name : 'foo'\n}\n\nconst Bar = {\n  __proto__ : Foo\n}\n\nconst Coo = Object.create(Bar)\n\nBar.name // 1. foo\n\nCoo.name = 'coo' \n\nFoo.name // 2. ?\nBar.name // 3. ? \nCoo.name // 4. ? \n```\n\n정답은 \n> 2. foo\n> 3. foo \n> 4. coo \n이다. \n\n2, 3의 동작은 위와 같지만, 4의 동작이 조금 달라진다.\n> 1. Coo.name -> 있음\n> 2. coo 출력\n\n새롭게 name을 자식에 할당함으로서, `[[Prototype]]`을 조회하지 않고, 곧바로 name을 가져올 수 있었다.\n\n## 프로토타입 체인\n위의 과정에서 아래와 같은 과정을 거쳤다.\nCoo.`[[Prototype]]`.name (=Bar.name) \nCoo.`[[Prototype]]`.`[[Prototype]]`.name (=Foo.name)\n\n이 처럼 없는 속성을 계속 연결된 `[[Prototype]]`주소를 통해 찾아내려가는 현상이 마치 체인처럼 이어졌다고하여, **프로토타입 체인** 이라고 명명한다.\n\n## constructor\nconstructor는 new 키워드를 이용하여 생성된 인스턴스가 자신을 낳은 주체가 무엇인지 표현하기 위해 사용되는 것이다.\n```javascript\nconst array = new Array()\narray.constructor // function Array\n\nfunction Foo () {}\nconst foo = new Foo()\nfoo.constructor // function Foo\n\n.\n.\n.\n```\n\n### 참고\nhttps://tecoble.techcourse.co.kr/post/2021-06-14-prototype/\nhttps://ko.javascript.info/function-prototype"},{"excerpt":"1. 이벤트 실행 우선순위 인라인 이벤트실행 -> addEventListener 이벤트 실행\n인라인 이벤트는 event 객체가 parameter로 넘겨지지 않습니다. 2. 버블링과 캡쳐링 버블링과 캡쳐링에 대하여","fields":{"slug":"/22_08_29/"},"frontmatter":{"date":"August 29, 2022","title":"✏️ 2022-08-29 Today I Learn","tags":["TIL","Javascript","DOM Event"]},"rawMarkdownBody":"\n## 1. 이벤트 실행 우선순위\n인라인 이벤트실행 -> addEventListener 이벤트 실행\n인라인 이벤트는 event 객체가 parameter로 넘겨지지 않습니다.\n\n## 2. 버블링과 캡쳐링\n<a href='/JS_버블링과캡쳐링'>버블링과 캡쳐링에 대하여</a>"},{"excerpt":"1. 버블링 정의 한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작하는 현상.  2. 캡쳐링 정의 이벤트가 상위에서 하위로 전달되며 핸들러를 실행하는 현상.  위의 구조에서 c를 클릭했을 경우, 이벤트가…","fields":{"slug":"/JS_버블링과캡쳐링/"},"frontmatter":{"date":"August 29, 2022","title":"이벤트 버블링/캡쳐링","tags":["TIL","Javascript","DOM Event"]},"rawMarkdownBody":"\n## 1. 버블링 정의\n> 한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작하는 현상.\n\n<img src=\"https://ko.javascript.info/article/bubbling-and-capturing/event-order-bubbling.svg\" width=\"300\" alt=\"[출처]javascript korea\"></img>\n\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"handler\">\n        </div>\n    </div>\n</div>\n```\n\n## 2. 캡쳐링 정의\n> 이벤트가 상위에서 하위로 전달되며 핸들러를 실행하는 현상.\n\n<img src=\"https://ko.javascript.info/article/bubbling-and-capturing/eventflow.svg\" width=\"300\" alt=\"[출처]javascript korea\"></img>\n\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"handler\">\n        </div>\n    </div>\n</div>\n```\n\n위의 구조에서 c를 클릭했을 경우, 이벤트가 a -> b -> c 로 전파되는 현상을 의미한다.\n다음과 같이 event 를 등록 할 떄, capture option을 활성화하여 사용한다.\n```javascript\nel.addEventListener('click', event , {capture: true})\n\n// or \n\nel.addEventListener('click', event , true)\n```\n\n\n\n## 3. stopPropagation\n> propagation의 뜻은 **번식** 이다.\n부모 element로의 캡쳐링/버블링을 막기위해선, stopPropagation 을 사용한다.\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"(e)=>e.stopPropagation()\">\n        </div>\n    </div>\n</div>\n```\n\n을 실행하게 되면, 이벤트는 c에서만 실행되게 된다.\n\n\n## 4. stopImmediatePropagation\n같은 레벨에 여러가지 이벤트 리스너가 등록되어 있을 경우에, stopPropagation을 사용하면\n동일레벨에서의 메서드 실행을 제어하지 못한다.\n\n```html\n<div id=\"a\">\n    <div id=\"b\">\n        <div id=\"c\" onclick=\"A함수;B함수\">\n        </div>\n    </div>\n</div>\n```\n위의 케이스에서 A함수의 실행만 시키고 싶어 stopPropagation을 함수내부에서 호출하여도, 같은레벨의 B함수는 계속 실행된다.\n이유는 stopPropagation은 상위레벨로의 이벤트 전파만 방지하기 때문이다.\n\n위의 케이스에서는 stopImmediatePropatation을 사용하여, 같은레벨로 이벤트가 전파되는 것을 방지해준다.\n\n## 5. Bubbling 되지않는 메서드\n* focus \n\n## 6. event.target vs event.currentTarget vs event.eventPhase\n* **event.target :** 실제 이벤트가 발생한 타겟.\n* **event.currentTarget :** 현재 이벤트가 벌어지고 있는 모타겟.\n* **event.eventPhase :**  현재 이벤트 흐름 단계(캡처링=1, 타깃=2, 버블링=3)\n\n## 7. 버블링을 굳이 막을 필요는 없다.\n지금은 상위 요소에서 이벤트가 어떻게 쓰일지 확실치 않더라도, 추후에 버블링이 필요한 경우가 생기기 때문에 stopPropagation의 사용은 추천하지 않는다.\n\n## 8. Bubbling이 Default value가 된 배경.\n> 현실에서 사고가 발생하면 지역 경찰이 먼저 사고를 조사합니다. 그 지역에 대해 가장 잘 아는 기관은 지역 경찰이기 때문입니다. 추가 조사가 필요하다면 그 이후에 상위 기관이 사건을 넘겨받습니다.\n\n## 9. 이벤트 위임(event delegation)\n> 캡쳐링과 버블링을 이용한 이벤트 핸들링 패턴\n\n### 참고문헌\n* https://ko.javascript.info/bubbling-and-capturing\n* https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/"},{"excerpt":"해시 테이블 1. 개념 해시 - 고기와 감자를 잘게다져 요리한것. 키 값을 잘게 다져 특정 인덱스로 변경\n-> 키와 값을 받아 키를 해싱(잘게 쪼개어)하여 도출된 인덱스에 값을 저장하는 구조 해시테이블이란?  입력받은 값을 특정범위내의 숫자로 변경하는 함수 2. 해시충돌 해시함수를 거친 값이 동일하다면, 데이터가 삽입되는 위치가 중복되는 현상 2-1. 해…","fields":{"slug":"/22_08_28/"},"frontmatter":{"date":"August 28, 2022","title":"✏️ 2022-08-28 Today I Learn","tags":["TIL","HTTP","자료구조","Javascript"]},"rawMarkdownBody":"\n## 해시 테이블\n### 1. 개념\n> 해시 - 고기와 감자를 잘게다져 요리한것. 키 값을 잘게 다져 특정 인덱스로 변경\n> <br/>-> 키와 값을 받아 **키를 해싱(잘게 쪼개어)**하여 도출된 인덱스에 값을 저장하는 구조\n\n* **해시테이블이란?**<br/>  입력받은 값을 특정범위내의 숫자로 변경하는 함수\n\n### 2. 해시충돌\n> 해시함수를 거친 값이 동일하다면, 데이터가 삽입되는 위치가 중복되는 현상\n\n#### 2-1. 해시충돌해결방법 1 : 선형탐사법\n충돌이 발생하면 다음인덱스에 데이터 저장. 충돌이 발생하면 다른곳에 저장.\n\n#### 2-2. 해시충돌해결방법 2 : 제곱탐사법\n충돌이 발생한 지점의 제곱만큼 옆으로 이동하여 데이터 저장 \n\n#### 2-3. 해시충돌해결방법 3 : 이중 해싱 \nA함수를 이용해 충돌이 발생하면 B함수를 통해 해싱하는것\n\n#### 2-4. 해시충돌해결방법 4 : 분리 연결 \n충돌이 발생하면, 연결리스트로직을 이용해 메모리에 저장. 한 메모리 내에 차지하는 데이터가 무한정 늘어날수 있음.\n\n\n### 3.자바스크립트에서 해시테이블을 사용하는 방법\n1. 배열\n2. 객체\n3. **[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) :** 키와 값이 다르게 저장. 키로 여러가지 타입을 저장할 수 있음.\n4. **[Set](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Set) :** 키와 값이 동일하게 저장. 중복된 내용 제거\n"},{"excerpt":"1. Javascript 구조분해할당을 통해 Swap을 구현 할 수 있다. ES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음. 2. Javascript shift() 를 이용한 큐 구현은 효율적이지 못하다. shift를 이용하게 되면, 빈 첫번째 메모리를 메우는 동작을 하기 때문에 n의 속도가 보장된다.\n따라서, 1의 속도를 보장해야하는 큐에서 적…","fields":{"slug":"/22_08_25/"},"frontmatter":{"date":"August 25, 2022","title":"✏️ 2022-08-25 Today I Learn","tags":["TIL","HTTP","Javascript"]},"rawMarkdownBody":"\n### 1. [Javascript] 구조분해할당을 통해 Swap을 구현 할 수 있다.\nES6 문법이므로 이하 지원브라우저에서는 사용할 수 없음.\n```javascript\nlet [a, b] = 1, 2\n\nconsole.log(a) // 1 \nconsole.log(b) // 2\n\n[b, a] = [a, b]\nconsole.log(a) // 2\nconsole.log(b) // 1\n```\n\n### 2. [Javascript] shift() 를 이용한 큐 구현은 효율적이지 못하다.\nshift를 이용하게 되면, 빈 첫번째 메모리를 메우는 동작을 하기 때문에 n의 속도가 보장된다.\n따라서, 1의 속도를 보장해야하는 큐에서 적절하지 못하다. 아래와 같이 delete 를 이용하여 사용하면된다.\n```javascript\nclass Node {\n    constructor(location, priority){\n        this.location = location;\n        this.priority = priority;\n    }\n}\n\nclass Queue {\n    constructor(){\n        this.queue = [];\n        this.head = 0;\n        this.rear = 0;\n    }\n    \n    enqueue(location, priority){\n        // 추가 시 길이를 1늘려준다.\n        this.queue[this.rear++] = new Node(location, priority)\n    }\n    \n    dequeue(){\n        // 삭제시 앞에 빈칸을 하나 추가하고, head의 인덱스를 1증가시킨다.\n        const value = this.queue[this.head]\n        delete this.queue[this.head++] // delete를 이용했기 때문에, 1의 속도를 보장한다.\n        return value\n    }\n}\n```\n\n### 3. [HTTP] 상태코드의 종류\n**1xx :** 요청이 수신되어 처리중 (거의사용하지않음)\n**2xx :** 정상처리\n**3xx :** ***요청을 완료하기 위해 추가적인 행동이 필요***\n**4xx :** ***클라이언트 오류***\n**5xx :** ***서버 오류***\n\n### 4. [HTTP] 상태코드 추론\n클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면 클라이언트는 **상위 상태코드**로 해석해서 처리한다.<br/>\n따라서, 미래에 새로운 상태코드가 추가되어도 클라이언트를 변경하지 않아도 된다. \n```\n388 -> 3xx\n499 -> 4xx \n```\n\n"},{"excerpt":"1. form 을 통한 데이터 전송 시 http contents type aplication/x-www-form-urlencoded : string을 인코딩해서 전달해야 하기 때문에 urlencoded 라는 타입을 명시하여 사용한다. multipart/form-data : 이미지 전송 시, 바이너리 파일로 여러 파트를 끊어서 보내야 할 경우 사용한다. 2…","fields":{"slug":"/22_08_24/"},"frontmatter":{"date":"August 24, 2022","title":"✏️ 2022-08-24 Today I Learn","tags":["TIL","HTTP","자료구조","Javascript"]},"rawMarkdownBody":"\n### 1. form 을 통한 데이터 전송 시 http contents type\n- **aplication/x-www-form-urlencoded** : string을 인코딩해서 전달해야 하기 때문에 urlencoded 라는 타입을 명시하여 사용한다.\n- **multipart/form-data** : 이미지 전송 시, 바이너리 파일로 여러 파트를 끊어서 보내야 할 경우 사용한다.\n\n### 2. HTML form으로 GET요청도 가능하다.\n\n### 3. PUT은 일부 업데이트가 아니다.\n기존의 리소스를 삭제하고 다른 리소스로 갈아치우는 것이기 때문에, 주의하여 사용해야한다.\n\n### 4. PATCH는 리소스의 일부 업데이트를 의미한다.\n\n### 5. HTTP 메소드의 속성\n- **안전** : 호출해도 리소스를 변경하지 않는다.\n    - GET, HEAD, OPTION, TRACE\n- **멱등** : 여러번 호출해도 같은 결과를 보여준다.\n    - GET, PUT, DELETE \n- **캐시** : 응답결과의 리소스를 반복하여 사용가능하다.\n    - GET, HEAD\n    - POST, PUT : 캐시키를 이용해 body값까지 모두 캐싱해야하기 때문에 번거로워서 잘 쓰이지 않는다.\n\n### 6. 메서드 설계 시 리소스에 해당되는 것은 '명사'이다.\nex) 미네랄을 캔다 에서 캔다가 중요요소가 아니라 미네랄을 기준으로 메서드를 설계해야한다.\nGET /minerals -> O\nGET /dig -> X \n\n### 7. GET은 스펙상으로 body를 붙힐 수 있다.\n구현이 되지 않은 서버가 많은 것일 뿐.\n\n### 8. HEAD는 body를 붙힐 수 없는 GET이라고 보면된다.\n\n### 9. POST는 리소스 상태의 변경을 위한 용도로도 사용된다.\n```\nPOST /car/{id}/start\nPOST /car/{id}/stop\n```\n이때는 메서드에 동사를 사용한다.\n\n### 10. POST와 PUT의 차이는 리소스의 정보를 어디서 알고있느냐의 차이다.\n- POST : 리소스의 생성을 요청하면, 서버에서 생성정보를 보내줌\n- PUT : 클라이언트에서 업데이트 할 리소스를 정해서 보내줌. 이 때, 클라이언트 내에 스토어로 리소스를 따로 관리해줘야하는 전제조건이 있다.\n\n### 11. 배열은 연속되는 순서로 메모리를 차지한다. 인덱스 값은 연속되지만, 주소값은 반드시 연속되어 증가하지 않는다.\n\n### 12. 자바스크립트 배열은 해시맵과 같아서, 논리값 할당이 가능하다. 단, 배열의 실제길이에 영향을 주지는 않는다.(사용권장X)\n\n### 13. 연결리스트는 메모리를 순서대로 차지하지 않는다. "}]}},"pageContext":{}},"staticQueryHashes":[]}