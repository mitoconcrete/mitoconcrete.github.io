{"componentChunkName":"component---src-templates-post-jsx","path":"/22_11_21/","result":{"data":{"site":{"siteMetadata":{"title":"mitoconcrete"}},"markdownRemark":{"id":"7617e852-4a75-5a03-8baf-fb255eb554f9","excerpt":"알고리즘 약수구하기 & 약수의 갯수 구하기 n의 약수를 구할 때는, a * b == n 이 되는 규칙을 항상 따른다. 따라서, n 번이 아니라 1/2n 번 만 반복문을 돌아도 된다. 따라서, 제곱근을 이용해 절반횟수만 반복문을 돌 수 있도록 설정한다. i 와 i // j 를 하면 한 사이클에서 2개의 약수를 구할 수 있다. 단 약수가 같은 수인 경우를 제…","html":"<h2>[알고리즘] 약수구하기 &#x26; 약수의 갯수 구하기</h2>\n<ul>\n<li>n의 약수를 구할 때는, a * b == n 이 되는 규칙을 항상 따른다.</li>\n<li>따라서, n 번이 아니라 1/2n 번 만 반복문을 돌아도 된다. 따라서, 제곱근을 이용해 절반횟수만 반복문을 돌 수 있도록 설정한다.</li>\n<li>i 와 i // j 를 하면 한 사이클에서 2개의 약수를 구할 수 있다.</li>\n<li>단 약수가 같은 수인 경우를 제외시키기 위해서 조건문을 이용하여 필터링 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> power<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        divider_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 일 때 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> 번 반복문을 거친다.'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">의 약수 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>j<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n                divider_cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    divider_cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">의 약수 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i <span class=\"token operator\">//</span> j<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> divider_cnt <span class=\"token operator\">></span> limit<span class=\"token punctuation\">:</span>\n            divider_cnt <span class=\"token operator\">=</span> power\n        answer <span class=\"token operator\">+=</span> divider_cnt\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<h2>[객체지향] 객체지향 Study</h2>\n<h3>1. setter 을 사용하지 말라?</h3>\n<p><a href=\"https://velog.io/@backfox/setter-%EC%93%B0%EC%A7%80-%EB%A7%90%EB%9D%BC%EA%B3%A0%EB%A7%8C-%ED%95%98%EA%B3%A0-%EA%B0%80%EB%B2%84%EB%A6%AC%EB%A9%B4-%EC%96%B4%EB%96%A1%ED%95%B4%EC%9A%94\">setter를 쓰지말라고 하고 그냥가버리면 어떡해요..</a></p>\n<p>setter를 사용하지마란 의미는, 절대 사용하지 말라는 말라기보단 객체의 책임 역할 핵심에 집중하여 의미없는 set을 이용해 멤버변수의 무분별한 업데이트를 막자는 의미이다.\nsetPrice 를 해놓고 discount 한 price를 전달하여 업데이트한다면, 그것은 의미와 맞지 않는다.\n만약 불가피하게 사용해야만 한다면, 구체적인 네이밍을 명시해줌으로서 모두가 납득할만한 setter를 배치해야한다.\n하지만, 사용하지 않는 것을 추천한다.</p>\n<h3>2. SOLID 5원칙</h3>\n<ul>\n<li>\n<p><strong>SRP(Single Responsibility Principle) : 단일 책임 원칙</strong></p>\n<ul>\n<li>한 클래스는 하나의 책임만을 가져야한다. 어떤 클래스를 수정했을 때, 다른 부분에서의 변경이 거의 없다면, 이 원칙을 잘 지킨 것 이다. 클래스를 수정하는 기준은 유일해야한다. 이유는 클래스는 단 하나의 책임을 가지고 있기 때문이다.</li>\n</ul>\n</li>\n<li>\n<p><strong>OCP(Open/Closed Principle) : 개방/폐쇄의 원칙</strong></p>\n<ul>\n<li>확장에는 개방적이나, 변경에는 닫혀있어야 한다. 하나의 참조변수로 여러타입의 변수를 선언 할 수 있는 것을 지향(Open)해야하지만, 단일 메소드를 변경하는 것을 지양(Close)한다.</li>\n<li>어떤 클래스에 걷기기능만 있다가 뛰기, 수영하기 등의 기능이 나중에 추가되었다고 했을 때, 계속 걷기 메소드를 수정하여 기능을 추가하기 보다는, 각 기능에 대한 인터페이스를 생성하고 그것을 상속받아 추가하는 것이 더 적은양의 코드를 수정하면서 기능을 구현 할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>LSP(Liskov Subsitution Principle) : 리스코프 치환 원칙</strong></p>\n<ul>\n<li>서브타입은 언제나 상위타입으로 치환 할 수 있어야한다. 상속으로 이를 구현 할 수 있으며, 주의할 점은 상호합의된 정합성을 깨뜨리면 안된다.</li>\n<li>이 원칙을 지키지 않으면, 메소드가 이상하게 동작할 수 있으며, 이는 테스트를 통해 검증이 되지않기에 주의해야한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>ISP(Interface Segregation Principle) : 인터페이스 분리 원칙</strong></p>\n<ul>\n<li>클라이언트가 자신이 사용하지 않는 메소드에 의존하면 안된다.</li>\n<li>범용 인터페이스를 제공하기 보단, 역할에 맞는 인터페이스를 각각 만들어 상속하여 실행하는게 목적에 맞다.</li>\n</ul>\n</li>\n<li>\n<p><strong>DIP(Dependency Inversion Principle) : 의존관계 역전 원칙</strong></p>\n<ul>\n<li>객체간 협력과정에서 의존관계가 형성되는데, 변하기 어려운 것을 기준으로 삼아 의존관계를 만드는 것이 좋다.</li>\n<li>변하기 어려운 것은 추상적인 개념이나 흐름이고, 변하기 쉬운것은 구체적인 행동을 의미한다.</li>\n</ul>\n</li>\n</ul>\n<p>SOLID 원칙을 발전시켜 만든 것이 디자인패턴이다. SOLID 원칙을 지키다보면 자연스레 디자인 패턴을 쓰고 있을 수 있다!</p>\n<h3>3. 추상화 vs 구체화</h3>\n<ul>\n<li>추상화는 어떤 사물에게서 공통적 성질을 뽑아 개념화하는 것이다.</li>\n<li>구체화는 어떤 사물의 특징을 세부적으로 구현하는 것이다.</li>\n<li>상속을 위한 부모를 정의하는 것은 추상화에 가깝고, 그것을 상속하면 상속할수록 구체화가 더해진다.</li>\n</ul>\n<h2>[Java] Java Study</h2>\n<h3>1. 상속</h3>\n<ul>\n<li>생성자와 초기화 블록은 상속되지 않는다.</li>\n<li>자식클래스의 멤버변수는 부모클래스의 멤버변수 갯수와 같거나 항상크다.</li>\n</ul>\n<h3>2. 오버라이딩</h3>\n<p>오버라이딩 시 접근제어자와 Exception은 제한된 조건 안에서 오버라이딩이 가능하다.</p>\n<ul>\n<li>접근제어자는 부모보다 권한이 작아질 수 없다.</li>\n<li>부모보다 더 넓은 범위의 Exception을 선언 하는 것은 불가하다.</li>\n<li>static 메소드를 인스턴스 메소드로 변경하는 것은 불가하다.</li>\n<li>인스턴스 메소드를 static 메소드로 변경하는 것은 불가하다.</li>\n</ul>\n<h3>3. super</h3>\n<ul>\n<li>클래스는 지역변수로 자신의 주소값을 사용 할 수 있다. 그것이 <code class=\"language-text\">this</code>인데 상속은 받은 클래스는 <code class=\"language-text\">super</code>를 지역변수로 사용이 가능하다. <code class=\"language-text\">this</code>, <code class=\"language-text\">super</code> 모두 인스턴스가 생성되어야 사용가능하기 때문에, static 메소드에서는 사용이 불가하다.</li>\n</ul>\n<h3>4. super()</h3>\n<ul>\n<li>자식클래스가 인스턴스화 될 때, 부모클래스의 생성자를 우선적으로 실행시켜 부모클래스의 멤버들을 초기화 시켜주어야 한다. 자바 컴파일러는 잠재적으로 super()생성자를 실행시켜준다.</li>\n</ul>\n<h3>5. 패키지</h3>\n<ul>\n<li>하나의 디렉토리이자, class 보따리</li>\n</ul>\n<h3>6. import</h3>\n<ul>\n<li><code class=\"language-text\">java.lang.*</code>과 같이 *을 사용하여 모든 클래스를 가져와도, 실행속도에는 큰 영향이 없다.</li>\n<li>static 클래스를 호출하면 클래스이름을 생략할 수 있다.</li>\n</ul>\n<h3>7. 제어자</h3>\n<ul>\n<li>접근제어자는 단하나만 사용가능하며, 이외 제어자들은 조합이 가능하다.</li>\n<li><strong>final :</strong> 변경할 수 없는 값에 선언하며, 이 키워드를 이용하면, 상속 및 오버라이딩 확장이 불가하다.</li>\n<li>\n<p><strong>제어자 조합주의 :</strong></p>\n<ul>\n<li>static, abstract : static은 무조건 몸통이 존재해야함</li>\n<li>abstract, final : 역할 상충(상속을 해야 이용 가능한 것 vs 상속이 불가한 것)</li>\n<li>abstract, private : 상속받는 곳에서 private으로 선언한 것에 접근 할 수 없다.</li>\n<li>private, final : 의미가 비슷하다.</li>\n</ul>\n</li>\n</ul>\n<h3>8. 다형성</h3>\n<ul>\n<li>참조변수의 타입에 따라, 사용할 수 있느 멤버변수의 갯수가 달라진다.</li>\n<li>부모의 참조변수로 자식을 사용할 수 없는 이유는 사용하는 멤버변수가 자식이 항상 같거나 많기 때문이다.</li>\n<li>메소드의 경우 참조변수의 타입에 관계없이, new 를 통해 선언한 인스턴스의 메소드를 사용하지만, 멤버변수는 참조변수를 따라간다.</li>\n<li>인스턴스 변수에 직접 접근하게 되면, 참조변수가 무엇이냐에 따라 값이 변할 수 있기 때문에, 직접적인 접근은 지양한다.</li>\n</ul>\n<h3>9. 형변환</h3>\n<ul>\n<li>참조변수의 타입을 강제로 정의하여, 사용할 수 있는 멤버의 범위를 조정한다. 인스턴스자체가 바뀌는 것은 아님.</li>\n</ul>\n<h3>10. instanceof</h3>\n<ul>\n<li>자신이 속한 모든 인스턴스에 <code class=\"language-text\">true</code>를 반환한다. 단 getName을 통해 접근하면, 참조변수가 가리키고 있는 인스턴스이름을 반환한다.</li>\n</ul>\n<h3>11. 인터페이스</h3>\n<ul>\n<li>인터페이스의 모든 멤버변수는 <code class=\"language-text\">public static final</code>로 정의한다.</li>\n<li>인터페이스의 장점은 클래스 간의 관계를 느슨하게 만들어준다는 것이다. 클래스 A와 B가 있다고 했을 때, A는 B클래스를 매개변수로 받아 사용하는 메소드가 있다. 따라서, A클래스를 사용하기 위해선, 반드시 B클래스의 정의가 필요하다. 하지만, 인터페이스를 사용하게 되면 의존관계가 되는 기능만 선언하고 해당 인터페이스만 매개변수로 전달하여 사용하면 되니, B클래스를 굳이 선언 할 필요가 없어지기에, 의존관계가 클래스-클래스를 사용하는 것 보단 훨씬 느슨해진다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Before</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">BUsage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// After</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">BUsage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        i<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">I</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">I</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>인터페이스에서 새로운 메서드를 추가하는 일은 해당 인터페이스를 사용하는 모든 클래스에 영향을 줄 수 있다. 따라서 <code class=\"language-text\">defalt</code>메소드를 인터페이스에 추가 할 수 있는 기능이 추가되었다.</li>\n</ul>\n<h3>12. 내부 클래스</h3>\n<ul>\n<li>두개의 클래스가 긴밀한 관계에 있을 때, 따로 선언해주는 것보다 내부에 선언해주어 코드의 복잡성을 줄여준다.</li>\n<li>외부 클래스의 멤버변수처럼 사용되기도 하고, 메서드내에서 지역변수처럼 사용되기도 한다.</li>\n</ul>\n<h3>13. 익명클래스</h3>\n<ul>\n<li>클래스 선언과 인스턴스 생성을 동시에 하는 클래스. 일회용 클래스이다.</li>\n</ul>\n<h2>[회고] 221121</h2>\n<p>자바의 객체지향 세계에 녹아들기에 배워야 할 것들, 신경써야할 것들이 너무나도 많다. 몰입해보자!!</p>","frontmatter":{"title":"✏️ 2022-11-21 Today I Learn","date":"November 21, 2022","update":"November 21, 2022","tags":["Java","알고리즘","객체지향","TIL","내일배움캠프","스파르타코딩캠프"],"series":"내일배움캠프"},"fields":{"slug":"/22_11_21/","readingTime":{"minutes":12.63}}},"seriesList":{"edges":[{"node":{"id":"1d145774-0c36-5571-8c1c-90522f062fb7","fields":{"slug":"/23_01_1st/"},"frontmatter":{"title":"✏️ 2023-01-1st Weekly I Learn"}}},{"node":{"id":"ef9afd14-c7a3-50a0-a5ad-3156dfb5da05","fields":{"slug":"/23_01_2nd/"},"frontmatter":{"title":"✏️ 2023-01-2nd Weekly I Learn"}}},{"node":{"id":"bff90a25-d0a7-5c7f-a6fb-bf15787a70dc","fields":{"slug":"/22_10_31/"},"frontmatter":{"title":"✏️ 2022-10-31 Today I Learn"}}},{"node":{"id":"68eb6c50-88e2-5afe-9bc0-7e1673e0ea6d","fields":{"slug":"/22_11_01/"},"frontmatter":{"title":"✏️ 2022-11-01 Today I Learn"}}},{"node":{"id":"6b664f20-f21b-5678-84b3-3959827dc922","fields":{"slug":"/22_11_02/"},"frontmatter":{"title":"✏️ 2022-11-02 Today I Learn"}}},{"node":{"id":"2af6e2bd-2fff-52cb-80cc-ffab51e8f899","fields":{"slug":"/22_11_03/"},"frontmatter":{"title":"✏️ 2022-11-03 Today I Learn"}}},{"node":{"id":"2beec6d7-e058-5f0d-ae30-d2012c7d16ea","fields":{"slug":"/22_11_04/"},"frontmatter":{"title":"✏️ 2022-11-04 Today I Learn"}}},{"node":{"id":"9fa2d0ab-5bb6-5e0e-8499-e69a7839c45f","fields":{"slug":"/22_11_1st/"},"frontmatter":{"title":"✏️ 2022-11-1st Weekly I Learn"}}},{"node":{"id":"f527c43e-29f4-5073-8ad4-ab7da0f3977f","fields":{"slug":"/22_11_07/"},"frontmatter":{"title":"✏️ 2022-11-07 Today I Learn"}}},{"node":{"id":"2cbe19b7-ed66-54b7-9a88-0fcc3cf6c153","fields":{"slug":"/22_11_08/"},"frontmatter":{"title":"✏️ 2022-11-08 Today I Learn"}}},{"node":{"id":"78126d6d-cf07-5526-a5e3-87239126f815","fields":{"slug":"/22_11_09/"},"frontmatter":{"title":"✏️ 2022-11-09 Today I Learn"}}},{"node":{"id":"692e8305-8db0-5580-a7f8-e43fefc02bd3","fields":{"slug":"/22_11_10/"},"frontmatter":{"title":"✏️ 2022-11-10 Today I Learn"}}},{"node":{"id":"514df56a-8dfc-5f59-8656-3c77a1e4327d","fields":{"slug":"/22_11_11/"},"frontmatter":{"title":"✏️ 2022-11-11 Today I Learn"}}},{"node":{"id":"dde9725a-6731-564e-8374-01317f8fb11f","fields":{"slug":"/22_11_2nd/"},"frontmatter":{"title":"✏️ 2022-11-2nd Weekly I Learn"}}},{"node":{"id":"97db2986-14ad-59dd-b32c-6b448d5a733e","fields":{"slug":"/22_11_14/"},"frontmatter":{"title":"✏️ 2022-11-14 Today I Learn"}}},{"node":{"id":"df8dd86e-3071-59c1-a092-288a3c90807e","fields":{"slug":"/22_11_15/"},"frontmatter":{"title":"✏️ 2022-11-15 Today I Learn"}}},{"node":{"id":"b02be35b-96ec-51b5-9ae2-23820778b8d8","fields":{"slug":"/22_11_16/"},"frontmatter":{"title":"✏️ 2022-11-16 Today I Learn"}}},{"node":{"id":"a2f18918-5486-599c-a969-ebe995817f9f","fields":{"slug":"/22_11_17/"},"frontmatter":{"title":"✏️ 2022-11-17 Today I Learn"}}},{"node":{"id":"c7d1adcc-ea6d-5273-ace8-c3d1819c89a9","fields":{"slug":"/22_11_18/"},"frontmatter":{"title":"✏️ 2022-11-18 Today I Learn"}}},{"node":{"id":"3222dd56-1dea-5052-81d7-7898798e0238","fields":{"slug":"/22_11_3rd/"},"frontmatter":{"title":"✏️ 2022-11-3rd Weekly I Learn"}}},{"node":{"id":"7617e852-4a75-5a03-8baf-fb255eb554f9","fields":{"slug":"/22_11_21/"},"frontmatter":{"title":"✏️ 2022-11-21 Today I Learn"}}},{"node":{"id":"9f104791-a2d7-50b6-80b5-e78bd5ec7678","fields":{"slug":"/22_11_22/"},"frontmatter":{"title":"✏️ 2022-11-22 Today I Learn"}}},{"node":{"id":"6205256b-a876-5a1e-94bf-9dc15065a965","fields":{"slug":"/22_11_23/"},"frontmatter":{"title":"✏️ 2022-11-23 Today I Learn"}}},{"node":{"id":"4db78a29-3441-5206-8002-6e7321bb7c99","fields":{"slug":"/22_11_24/"},"frontmatter":{"title":"✏️ 2022-11-24 Today I Learn"}}},{"node":{"id":"4adfbcd8-9d66-5c5d-ab31-71005a65cd14","fields":{"slug":"/22_11_25/"},"frontmatter":{"title":"✏️ 2022-11-25 Today I Learn"}}},{"node":{"id":"65a2f128-15ee-5853-a4c3-115eb93af8f2","fields":{"slug":"/22_11_4th/"},"frontmatter":{"title":"✏️ 2022-11-4th Weekly I Learn"}}},{"node":{"id":"6474759c-b861-5e6d-bcd3-1dc4d4fb6050","fields":{"slug":"/22_11_28/"},"frontmatter":{"title":"✏️ 2022-11-28 Today I Learn"}}},{"node":{"id":"a9471a01-6814-534f-8f42-7bb167e939f9","fields":{"slug":"/22_11_29/"},"frontmatter":{"title":"✏️ 2022-11-29 Today I Learn"}}},{"node":{"id":"55a96c56-95ce-5ddd-902f-74879ef03e7d","fields":{"slug":"/22_11_30/"},"frontmatter":{"title":"✏️ 2022-11-30 Today I Learn"}}},{"node":{"id":"e421a9be-d87d-507b-b2ec-653f9b0ab722","fields":{"slug":"/22_12_01/"},"frontmatter":{"title":"✏️ 2022-12-01 Today I Learn"}}},{"node":{"id":"004d92cd-c4ab-57f0-a1f2-29ddf364e409","fields":{"slug":"/22_12_02/"},"frontmatter":{"title":"✏️ 2022-12-02 Today I Learn"}}},{"node":{"id":"bcf2f7af-4ba3-59b7-83dd-d5376cf5aa36","fields":{"slug":"/22_12_1st/"},"frontmatter":{"title":"✏️ 2022-12-1th Weekly I Learn"}}},{"node":{"id":"d247bb1b-dcca-5f7a-951c-6c2a803db140","fields":{"slug":"/22_12_05/"},"frontmatter":{"title":"✏️ 2022-12-05 Today I Learn"}}},{"node":{"id":"776f9c88-4455-53f4-ae90-e7754918558a","fields":{"slug":"/22_12_06/"},"frontmatter":{"title":"✏️ 2022-12-06 Today I Learn"}}},{"node":{"id":"c6b17078-0525-5ec8-80ee-0b9fa2e0227d","fields":{"slug":"/22_12_07/"},"frontmatter":{"title":"✏️ 2022-12-07 Today I Learn"}}},{"node":{"id":"e7f37c40-c448-573d-80ee-a87e7f25485d","fields":{"slug":"/22_12_08/"},"frontmatter":{"title":"✏️ 2022-12-08 Today I Learn"}}},{"node":{"id":"29d073f0-0b07-5b80-9e0f-d5bfb9de98b5","fields":{"slug":"/22_12_09/"},"frontmatter":{"title":"✏️ 2022-12-09 Today I Learn"}}},{"node":{"id":"a8d8ef79-c35e-5a8b-a1c9-accfa950cbc9","fields":{"slug":"/22_12_2nd/"},"frontmatter":{"title":"✏️ 2022-12-2nd Weekly I Learn"}}},{"node":{"id":"4252e767-57a3-5105-a02f-7cfc836d0e6a","fields":{"slug":"/22_12_12/"},"frontmatter":{"title":"✏️ 2022-12-12 Today I Learn"}}},{"node":{"id":"aa13b33f-cfd2-5c84-9933-faa53b0c707b","fields":{"slug":"/22_12_13/"},"frontmatter":{"title":"✏️ 2022-12-13 Today I Learn"}}},{"node":{"id":"7d26c70f-0213-5152-91d8-c6e17ed0c77c","fields":{"slug":"/22_12_14/"},"frontmatter":{"title":"✏️ 2022-12-14 Today I Learn"}}},{"node":{"id":"0a14e2fa-df2b-5d4e-b49f-bc200ddf34e8","fields":{"slug":"/22_12_15/"},"frontmatter":{"title":"✏️ 2022-12-15 Today I Learn"}}},{"node":{"id":"497abc88-2ebb-5f02-8a15-7f8ec4bb19c3","fields":{"slug":"/22_12_16/"},"frontmatter":{"title":"✏️ 2022-12-16 Today I Learn"}}},{"node":{"id":"c3e1b3d6-bab1-5ccc-9cb9-e97c50ce04d8","fields":{"slug":"/22_12_3rd/"},"frontmatter":{"title":"✏️ 2022-12-3rd Weekly I Learn"}}},{"node":{"id":"8a7fcec3-5344-5298-8f9b-5d6f3fc601d0","fields":{"slug":"/22_12_19/"},"frontmatter":{"title":"✏️ 2022-12-19 Today I Learn"}}},{"node":{"id":"00e08244-1e45-57e7-8914-79729e10c2c2","fields":{"slug":"/22_12_20/"},"frontmatter":{"title":"✏️ 2022-12-20 Today I Learn"}}},{"node":{"id":"afff2d03-2396-5e52-89d5-6da63e7b29d3","fields":{"slug":"/22_12_21/"},"frontmatter":{"title":"✏️ 2022-12-21 Today I Learn"}}},{"node":{"id":"8b77f9b7-35a4-50d1-b220-efaeac19ecfe","fields":{"slug":"/22_12_22/"},"frontmatter":{"title":"✏️ 2022-12-22 Today I Learn"}}},{"node":{"id":"f924b607-0e05-5991-a601-36775ed1ad62","fields":{"slug":"/22_12_23/"},"frontmatter":{"title":"✏️ 2022-12-23 Today I Learn"}}},{"node":{"id":"fec859b1-91c9-5b74-9dbd-a0c0a65e299b","fields":{"slug":"/22_12_4th/"},"frontmatter":{"title":"✏️ 2022-12-4th Weekly I Learn"}}},{"node":{"id":"002d301b-53a2-5797-bda2-4197e25cf175","fields":{"slug":"/22_12_26/"},"frontmatter":{"title":"✏️ 2022-12-26 Today I Learn"}}},{"node":{"id":"4627467c-0323-5342-9723-7fe117c966e7","fields":{"slug":"/22_12_27/"},"frontmatter":{"title":"✏️ 2022-12-27 Today I Learn"}}},{"node":{"id":"da9cc9b4-ba58-5a4d-a432-5604c400243d","fields":{"slug":"/22_12_28/"},"frontmatter":{"title":"✏️ 2022-12-28 Today I Learn"}}},{"node":{"id":"c45dbf3b-84b6-513a-b91f-00d3831a2feb","fields":{"slug":"/22_12_29/"},"frontmatter":{"title":"✏️ 2022-12-29 Today I Learn"}}},{"node":{"id":"54168b06-a8bd-5d1f-ab5f-b5b3e74cf3d1","fields":{"slug":"/22_12_30/"},"frontmatter":{"title":"✏️ 2022-12-30 Today I Learn"}}},{"node":{"id":"b315d59c-eadc-5108-a1ca-b43c8aa303e5","fields":{"slug":"/05/"},"frontmatter":{"title":"✏️ 2023-01-05 Today I Learn"}}},{"node":{"id":"57a17574-8da9-5f95-89ef-aa7b4cfe30a1","fields":{"slug":"/06/"},"frontmatter":{"title":"✏️ 2023-01-06 Today I Learn"}}},{"node":{"id":"7244b2a5-fd58-5397-bcc9-38c48846a39d","fields":{"slug":"/09/"},"frontmatter":{"title":"✏️ 2023-01-09 Today I Learn"}}},{"node":{"id":"bf73a37b-2fea-5ed2-90a2-aa1f04ea22ed","fields":{"slug":"/10/"},"frontmatter":{"title":"✏️ 2023-01-10 Today I Learn"}}},{"node":{"id":"52b3f010-ecb1-58c4-bcd6-2e93ae6ee6ff","fields":{"slug":"/11/"},"frontmatter":{"title":"✏️ 2023-01-11 Today I Learn"}}},{"node":{"id":"297b9116-e330-5828-b78f-a1d6e2126d24","fields":{"slug":"/12/"},"frontmatter":{"title":"✏️ 2023-01-12 Today I Learn"}}}]},"previous":{"fields":{"slug":"/22_11_3rd/"},"frontmatter":{"title":"✏️ 2022-11-3rd Weekly I Learn"}},"next":{"fields":{"slug":"/22_11_22/"},"frontmatter":{"title":"✏️ 2022-11-22 Today I Learn"}}},"pageContext":{"id":"7617e852-4a75-5a03-8baf-fb255eb554f9","series":"내일배움캠프","previousPostId":"3222dd56-1dea-5052-81d7-7898798e0238","nextPostId":"9f104791-a2d7-50b6-80b5-e78bd5ec7678"}},"staticQueryHashes":[]}